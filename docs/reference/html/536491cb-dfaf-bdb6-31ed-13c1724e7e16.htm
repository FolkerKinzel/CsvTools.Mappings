<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CsvConverter.OpenReadAnalyzed&lt;TResult&gt; Method</title><meta name="Title" content="OpenReadAnalyzed&lt;TResult&gt;" /><meta name="Help.Id" content="M:FolkerKinzel.CsvTools.Mappings.CsvConverter.OpenReadAnalyzed``1(System.String,FolkerKinzel.CsvTools.Mappings.CsvMapping,System.Func{System.Object,``0},System.Text.Encoding,FolkerKinzel.CsvTools.Header,System.Int32)" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.CsvTools.Mappings" /><meta name="guid" content="536491cb-dfaf-bdb6-31ed-13c1724e7e16" /><meta name="Description" content="Opens a CSV file for parsing its data after it had been analyzed." /><meta name="tocFile" content="../toc/IDAAB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.CsvTools.Mappings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Csv<wbr />Converter<span id="LST785CF235_0" data-languageSpecificText="cpp=::|nu=."></span>Open<wbr />Read<wbr />Analyzed<span id="LST785CF235_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">TResult</span><span id="LST785CF235_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Method</h1><div class="summary">Opens a CSV file for parsing its data after it had been analyzed.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings</a><br /><strong>Assembly:</strong> FolkerKinzel.CsvTools.Mappings (in FolkerKinzel.CsvTools.Mappings.dll) Version: 1.0.0+9a361be2cf99f6b1943b70cd0acb1fb8663893c0<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">CsvReader</span>&lt;TResult&gt; <span class="identifier">OpenReadAnalyzed</span>&lt;TResult&gt;(
	<span class="identifier">string</span> <span class="parameter">filePath</span>,
	<span class="identifier">CsvMapping</span> <span class="parameter">mapping</span>,
	<span class="identifier">Func</span>&lt;<span class="identifier">Object</span>, TResult&gt; <span class="parameter">conversion</span>,
	<span class="identifier">Encoding</span>? <span class="parameter">defaultEncoding</span> = <span class="keyword">null</span>,
	<span class="identifier">Header</span> <span class="parameter">header</span> = <span class="identifier">Header</span>.ProbablyPresent,
	<span class="identifier">int</span> <span class="parameter">analyzedLines</span> = 5
)
</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">OpenReadAnalyzed</span>(<span class="keyword">Of</span> TResult) ( 
	<span class="parameter">filePath</span> <span class="keyword">As</span> <span class="identifier">String</span>,
	<span class="parameter">mapping</span> <span class="keyword">As</span> <span class="identifier">CsvMapping</span>,
	<span class="parameter">conversion</span> <span class="keyword">As</span> <span class="identifier">Func</span>(<span class="keyword">Of</span> <span class="identifier">Object</span>, TResult),
	Optional <span class="parameter">defaultEncoding</span> <span class="keyword">As</span> <span class="identifier">Encoding</span> = <span class="keyword">Nothing</span>,
	Optional <span class="parameter">header</span> <span class="keyword">As</span> <span class="identifier">Header</span> = <span class="identifier">Header</span>.ProbablyPresent,
	Optional <span class="parameter">analyzedLines</span> <span class="keyword">As</span> <span class="identifier">Integer</span> = 5
) <span class="keyword">As</span> <span class="identifier">CsvReader</span>(<span class="keyword">Of</span> TResult)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span>:
<span class="keyword">generic</span>&lt;<span class="keyword">typename</span> TResult&gt;
<span class="keyword">static</span> <span class="identifier">CsvReader</span>&lt;TResult&gt;^ <span class="identifier">OpenReadAnalyzed</span>(
	<span class="identifier">String</span>^ <span class="parameter">filePath</span>, 
	<span class="identifier">CsvMapping</span>^ <span class="parameter">mapping</span>, 
	<span class="identifier">Func</span>&lt;<span class="identifier">Object</span>^, TResult&gt;^ <span class="parameter">conversion</span>, 
	<span class="identifier">Encoding</span>^ <span class="parameter">defaultEncoding</span> = <span class="keyword">nullptr</span>, 
	<span class="identifier">Header</span> <span class="parameter">header</span> = <span class="identifier">Header</span>::ProbablyPresent, 
	<span class="identifier">int</span> <span class="parameter">analyzedLines</span> = 5
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs"><span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">OpenReadAnalyzed</span> : 
        <span class="parameter">filePath</span> : <span class="identifier">string</span> * 
        <span class="parameter">mapping</span> : <span class="identifier">CsvMapping</span> * 
        <span class="parameter">conversion</span> : <span class="identifier">Func</span>&lt;<span class="identifier">Object</span>, 'TResult&gt; * 
        ?<span class="parameter">defaultEncoding</span> : <span class="identifier">Encoding</span> * 
        ?<span class="parameter">header</span> : <span class="identifier">Header</span> * 
        ?<span class="parameter">analyzedLines</span> : <span class="identifier">int</span> 
(* Defaults:
        <span class="keyword">let </span><span class="identifier">_</span><span class="identifier">defaultEncoding</span> = defaultArg <span class="identifier">defaultEncoding</span> <span class="keyword">null</span>
        <span class="keyword">let </span><span class="identifier">_</span><span class="identifier">header</span> = defaultArg <span class="identifier">header</span> <span class="identifier">Header</span>.ProbablyPresent
        <span class="keyword">let </span><span class="identifier">_</span><span class="identifier">analyzedLines</span> = defaultArg <span class="identifier">analyzedLines</span> 5
*)
<span class="keyword">-&gt;</span> <span class="identifier">CsvReader</span>&lt;'TResult&gt; </code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">filePath</span>  <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a></dt><dd>File path of the CSV file to read.</dd><dt class="has-text-weight-normal"><span class="parameter">mapping</span>  <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a></dt><dd>The <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a> used to convert the CSV data.</dd><dt class="has-text-weight-normal"><span class="parameter">conversion</span>  <a href="https://learn.microsoft.com/dotnet/api/system.func-2" target="_blank" rel="noopener noreferrer">Func</a><span id="LST785CF235_3" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>, <span class="selflink"><span class="typeparameter">TResult</span></span><span id="LST785CF235_4" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd><p>
            A function that converts the content of <span class="parameter">mapping</span>
            to an instance of <span class="parameter">TResult</span>. 
            </p><p>
            The function is called for each row in 
            the CSV file and gets the <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a> as argument, filled with the 
            current <a href="6b3d332f-0d34-761d-a6cf-ad02d3660fe6.htm">CsvRecord</a> instance. The <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a> is passed to the 
            function as <span class="code">dynamic</span> argument: Inside the function the registered 
            <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances can be used like 
            regular .NET properties, but without IntelliSense ("late binding").
            </p></dd><dt class="has-text-weight-normal"><span class="parameter">defaultEncoding</span>  <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding" target="_blank" rel="noopener noreferrer">Encoding</a>  (Optional)</dt><dd>
            The text <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding" target="_blank" rel="noopener noreferrer">Encoding</a> to be used if the CSV file has no byte order mark (BOM), or 
            <span class="code">null</span> to use <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding.utf8" target="_blank" rel="noopener noreferrer">UTF8</a> in this case. Use <a href="8997540d-a632-cf81-5904-6b4a1139c2e1.htm">GetExcelArguments<span id="LST785CF235_5" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>
            to get the appropriate argument for this parameter when importing CSV data from Excel.
            </dd><dt class="has-text-weight-normal"><span class="parameter">header</span>  <a href="0e207fe7-b6ad-9280-689f-779ab5678885.htm">Header</a>  (Optional)</dt><dd>A supposition that is made about the presence of a header row.</dd><dt class="has-text-weight-normal"><span class="parameter">analyzedLines</span>  <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a>  (Optional)</dt><dd>Maximum number of lines to analyze in the CSV file. The minimum 
            value is <a href="e1089601-0c54-4d91-7cd6-64716d66184d.htm">AnalyzedLinesMinCount</a>. If the file has fewer lines than 
            <span class="parameter">analyzedLines</span>, it will be analyzed completely. (You can specify 
            <a href="https://learn.microsoft.com/dotnet/api/system.int32.maxvalue" target="_blank" rel="noopener noreferrer">Int32.MaxValue</a> to analyze the entire file in any case.)</dd></dl><h4 class="quickLinkHeader">Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">TResult</span></dt><dd> Generic type parameter that specifies the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a>
            of the items that the <a href="99a9e15c-7c25-31d2-869e-d913106fea34.htm">CsvReader<span id="LST785CF235_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TResult<span id="LST785CF235_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> returns.</dd></dl><h4 class="quickLinkHeader">Return Value</h4><a href="99a9e15c-7c25-31d2-869e-d913106fea34.htm">CsvReader</a><span id="LST785CF235_8" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">TResult</span></span><span id="LST785CF235_9" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br />A <a href="99a9e15c-7c25-31d2-869e-d913106fea34.htm">CsvReader<span id="LST785CF235_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TResult<span id="LST785CF235_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> that allows you to iterate through the
            data parsed from the CSV file.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDJCSection"><p>
            The method performs a statistical analysis on the CSV file. The result of the analysis is therefore 
            always only an estimate, the accuracy of which increases with the number of lines analyzed.
            </p><p>
            The field delimiters COMMA (<span class="code">','</span>, %x2C), SEMICOLON  (<span class="code">';'</span>, %x3B), 
            HASH (<span class="code">'#'</span>, %x23), TAB (<span class="code">'\t'</span>, %x09), and SPACE (<span class="code">' '</span>, %x20) are recognized 
            automatically.
            </p><p>
            This method also tries to determine the <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding" target="_blank" rel="noopener noreferrer">Encoding</a> of the CSV file from the
            byte order mark (BOM). If no byte order mark can be found, <span class="parameter">defaultEncoding</span> is
            used.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDKCSection"><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body">In the following code examples - for easier readability - exception handling
            has been omitted.</div></article><p>CSV data exchange with Excel:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
using System.Globalization;
using System.Text;
// A namespace alias helps to avoid name conflicts
// with the converters from System.ComponentModel
using Conv = FolkerKinzel.CsvTools.Mappings.TypeConverters;

namespace Examples;

internal sealed record Customer(string Name, decimal Sales, DateOnly RecentPurchase);

internal static class ExcelExample
{
    internal static void CsvDataExchangeWithExcel(string filePath)
    {
        // Which field separators and formatting Excel accepts and exports depends on the
        // "Regional Settings" in Excel. The default setting corresponds to the settings
        // of the user's computer (and thus of CultureInfo.CurrentCulture).

        // Using CultureInfo.CurrentCulture, the corresponding parameters can be determined
        // automatically.

        // The application is free to override the value of CurrentCulture for the current
        // Thread if users do not use the default setting in Excel.

        // This example shows the procedure for exporting CSV data to Excel. The procedure
        // for importing is equivalent.(The console output is from a computer with the locale
        // "de-DE".)

        Console.WriteLine("Current culture: {0}", CultureInfo.CurrentCulture);

        Customer[] customers = [ new("Susi", 4_711m, new DateOnly(2004, 3, 14)),
                                 new("Tom", 38_527.28m, new DateOnly(2006, 12, 24)),
                                 new("Sören", 25.8m, new DateOnly(2011, 8, 27)) ];

        // Get the Excel arguments for CultureInfo.CurrentCulture:
        (char delimiter,
         IFormatProvider formatProvider,
         Encoding ansi) = Csv.GetExcelArguments();

        // Pass the formatProvider from the Excel arguments to all localizable converters.
        // (The same CsvMapping can be used for writing and parsing.)
        CsvMapping mapping = CsvMappingBuilder
            .Create()
            .AddProperty("Name", Conv::StringConverter.CreateNonNullable())
            .AddProperty("Sales", new Conv::DecimalConverter(formatProvider))
            .AddProperty("RecentPurchase", new Conv::DateOnlyConverter(formatProvider))
            .Build();

        static void FillMapping(Customer customer, dynamic mapping)
        {
            mapping.Name = customer.Name;
            mapping.Sales = customer.Sales;
            mapping.RecentPurchase = customer.RecentPurchase;
        }

        // Don't forget to pass the delimiter from the Excel arguments!
        // (The textEncoding can be omitted when writing, but not when reading.)
        customers.SaveCsv(filePath, mapping, FillMapping, delimiter, textEncoding: ansi);

        Console.WriteLine();
        Console.WriteLine(File.ReadAllText(filePath, ansi));

        // =================================================

        // Parsing CSV that comes from Excel:

        static Customer InitializeCustomer(dynamic mapping) =&gt; new(mapping.Name,
                                                                   mapping.Sales,
                                                                   mapping.RecentPurchase);

        // Using this method allows to switch automatically to Unicode if the file
        // has a byte order mark, and to detect a different delimiter character if 
        // the user had changed the default settings in Excel.
        using CsvReader&lt;Customer&gt; reader = CsvConverter.OpenReadAnalyzed(filePath,
                                                                         mapping,
                                                                         InitializeCustomer,
                                                                         defaultEncoding: ansi);

        Console.WriteLine();
        Console.WriteLine("The customer with the lowest sales is {0}.",
                          reader.MinBy(x =&gt; x.Sales)?.Name);
    }
}

/*
 Console output:

Current culture: de-DE

Name;Sales;RecentPurchase
Susi;4711;14.03.2004
Tom;38527,28;24.12.2006
Sören;25,8;27.08.2011

The customer with the lowest sales is Sören.
*/</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Exceptions</h2><div id="IDLCSection"><table class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noopener noreferrer">ArgumentNullException</a></td><td><span class="parameter">filePath</span>, or 
            <span class="parameter">mapping</span>, or <span class="parameter">conversion</span> is <span class="code">null</span>.</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception" target="_blank" rel="noopener noreferrer">ArgumentOutOfRangeException</a></td><td><p><span class="parameter">header</span> is not a defined value of 
            the <a href="0e207fe7-b6ad-9280-689f-779ab5678885.htm">Header</a> enum.</p><p> - or -</p><p><span class="parameter">header</span> is a combination of <a href="0e207fe7-b6ad-9280-689f-779ab5678885.htm">Header</a> values.</p></td></tr><tr><td><a href="f854e2a7-ec0d-2ce0-8b03-fd1013c13e4a.htm">CsvFormatException</a></td><td>Invalid CSV file. Try to increase the value of 
            <span class="parameter">analyzedLines</span> to get a better analyzer result!</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="c0a71066-45f5-2019-09fd-807d0b636815.htm">CsvConverter Class</a></div><div><a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Type Parameters</a></li><li><a class="quickLink">Return Value</a></li></ul></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Exceptions</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>