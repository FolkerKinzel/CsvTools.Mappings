<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CsvMapping.OpenWrite&lt;TData&gt; Method</title><meta name="Title" content="OpenWrite&lt;TData&gt;" /><meta name="Help.Id" content="M:FolkerKinzel.CsvTools.Mappings.CsvMapping.OpenWrite``1(FolkerKinzel.CsvTools.CsvWriter,FolkerKinzel.CsvTools.Mappings.Mapping,System.Action{``0,System.Object})" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.CsvTools.Mappings" /><meta name="guid" content="8cab1107-209b-1c2f-94f9-620e69b08c14" /><meta name="Description" content="Initializes a new instance." /><meta name="tocFile" content="../toc/IDAAB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.CsvTools.Mappings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Csv<wbr />Mapping<span id="LST2067DD26_0" data-languageSpecificText="cpp=::|nu=."></span>Open<wbr />Write<span id="LST2067DD26_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">TData</span><span id="LST2067DD26_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Method</h1><div class="summary">
            Initializes a new <a href="7afaa303-1992-1f4c-33c3-344666391130.htm">CsvWriter<span id="LST2067DD26_3" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TData<span id="LST2067DD26_4" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> instance.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings</a><br /><strong>Assembly:</strong> FolkerKinzel.CsvTools.Mappings (in FolkerKinzel.CsvTools.Mappings.dll) Version: 1.0.0-alpha.3+b62d1f5ca4b113f1b4c19b114b186994bb01c75b<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">CsvWriter</span>&lt;TData&gt; <span class="identifier">OpenWrite</span>&lt;TData&gt;(
	<span class="identifier">CsvWriter</span> <span class="parameter">writer</span>,
	<span class="identifier">Mapping</span> <span class="parameter">mapping</span>,
	<span class="identifier">Action</span>&lt;TData, <span class="identifier">Object</span>&gt; <span class="parameter">conversion</span>
)
</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">OpenWrite</span>(<span class="keyword">Of</span> TData) ( 
	<span class="parameter">writer</span> <span class="keyword">As</span> <span class="identifier">CsvWriter</span>,
	<span class="parameter">mapping</span> <span class="keyword">As</span> <span class="identifier">Mapping</span>,
	<span class="parameter">conversion</span> <span class="keyword">As</span> <span class="identifier">Action</span>(<span class="keyword">Of</span> TData, <span class="identifier">Object</span>)
) <span class="keyword">As</span> <span class="identifier">CsvWriter</span>(<span class="keyword">Of</span> TData)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span>:
<span class="keyword">generic</span>&lt;<span class="keyword">typename</span> TData&gt;
<span class="keyword">static</span> <span class="identifier">CsvWriter</span>&lt;TData&gt;^ <span class="identifier">OpenWrite</span>(
	<span class="identifier">CsvWriter</span>^ <span class="parameter">writer</span>, 
	<span class="identifier">Mapping</span>^ <span class="parameter">mapping</span>, 
	<span class="identifier">Action</span>&lt;TData, <span class="identifier">Object</span>^&gt;^ <span class="parameter">conversion</span>
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs"><span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">OpenWrite</span> : 
        <span class="parameter">writer</span> : <span class="identifier">CsvWriter</span> * 
        <span class="parameter">mapping</span> : <span class="identifier">Mapping</span> * 
        <span class="parameter">conversion</span> : <span class="identifier">Action</span>&lt;'TData, <span class="identifier">Object</span>&gt; <span class="keyword">-&gt;</span> <span class="identifier">CsvWriter</span>&lt;'TData&gt; </code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">writer</span>  <a href="416743f7-8d1c-a088-f0a1-ad88a32faeb1.htm">CsvWriter</a></dt><dd>The <a href="416743f7-8d1c-a088-f0a1-ad88a32faeb1.htm">CsvWriter</a> used for writing.</dd><dt class="has-text-weight-normal"><span class="parameter">mapping</span>  <a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a></dt><dd>The <a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a> used to convert a
            <span class="parameter">TData</span> instance to a CSV row.</dd><dt class="has-text-weight-normal"><span class="parameter">conversion</span>  <a href="https://learn.microsoft.com/dotnet/api/system.action-2" target="_blank" rel="noopener noreferrer">Action</a><span id="LST2067DD26_5" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">TData</span></span>, <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a><span id="LST2067DD26_6" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd><p>
            A method that fills the content of a <span class="parameter">TData</span> instance
            into the properties of <span class="parameter">mapping</span>. 
            </p><p><span class="parameter">conversion</span> is called with each CSV row to be written and it
            gets the <span class="parameter">TData</span> instance and <span class="parameter">mapping</span> as
            arguments. The <a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a>
            is passed to the method as <span class="code">dynamic</span> argument: Inside the method the registered 
            <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances can be used like 
            regular .NET properties, but without IntelliSense ("late binding").
            </p><p>
            With each call all <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances in
            <span class="parameter">mapping</span> have been reset to their <a href="89b8ba33-74c0-f9cf-a252-f353a3f742ad.htm">DefaultValue</a>.
            </p></dd></dl><h4 class="quickLinkHeader">Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">TData</span></dt><dd>
            Generic type parameter for the data type that the newly initialized <a href="7afaa303-1992-1f4c-33c3-344666391130.htm">CsvWriter<span id="LST2067DD26_7" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TData<span id="LST2067DD26_8" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> 
            can write as CSV row.
            </dd></dl><h4 class="quickLinkHeader">Return Value</h4><a href="7afaa303-1992-1f4c-33c3-344666391130.htm">CsvWriter</a><span id="LST2067DD26_9" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">TData</span></span><span id="LST2067DD26_10" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br />A <a href="7afaa303-1992-1f4c-33c3-344666391130.htm">CsvWriter<span id="LST2067DD26_11" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TData<span id="LST2067DD26_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> instance that allows you to write <span class="parameter">TData</span>
            instances as CSV rows.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDGCSection"><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body">In the following code examples - for easier readability - exception handling has been omitted.</div></article><p>Object serialization with CSV:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
using FolkerKinzel.CsvTools.Mappings.Converters;

namespace Examples;

internal sealed class Pupil
{
    public string? Name { get; set; }
    public string? Subject { get; set; }
    public DayOfWeek? LessonDay { get; set; }
    public TimeSpan? LessonBegin { get; set; }

    public override string ToString()
    {
        const string NULL = "&lt;null&gt;";
        string lessonDay = LessonDay.HasValue ? $"{nameof(DayOfWeek)}.{LessonDay}" : NULL;
        string lessonBegin = LessonBegin.HasValue ? LessonBegin.Value.ToString() : NULL;

        return $"""
            Name:        {Name ?? NULL}
            Subject:     {Subject ?? NULL}
            LessonDay:   {lessonDay}
            LessonBegin: {lessonBegin}
            """;
    }
}

internal static class ObjectSerializationExample
{
    public static void CsvReadWritePupils(string filePath)
    {
        // Create a nonstandard CSV-File
        File.WriteAllText(filePath, """
                Unterrichtstag;Unterrichtsbeginn;Vollständiger Name;Unterrichtsfach;
                Wednesday;14:30;Susi;Piano
                Thursday;15:15;Carl Czerny;Piano;
                ;;Frederic Chopin
                """);

        // Reuse a converter for more than one property:
        TypeConverter&lt;string?&gt; stringConverter = StringConverter.CreateNullable();

        // Initialize a Mapping that retrieves the data from
        // the CSV-Columns and converts it to the right data type.
        // Aliases with wildcards can be used to match the column-headers
        // of the CSV file. 
        Mapping mapping = Mapping
            .Create()
            .AddProperty("Name", ["*name"], stringConverter)
            .AddProperty("Subject", ["*subject", "*fach"], stringConverter)
            .AddProperty("LessonDay", ["*day", "*tag"], new EnumConverter&lt;DayOfWeek&gt;().ToNullableConverter())
            .AddProperty("LessonBegin", ["*begin?"], new TimeSpanConverter().ToNullableConverter());

        using CsvReader&lt;Pupil&gt; pupilsReader =
           CsvMapping.OpenReadAnalyzed&lt;Pupil&gt;(filePath,
                                              mapping,
                                              // dyn is mapping as a dynamic variable ("late binding")
                                              static dyn =&gt; new Pupil
                                              {
                                                  Name = dyn.Name,
                                                  LessonBegin = dyn.LessonBegin,
                                                  LessonDay = dyn.LessonDay,
                                                  Subject = dyn.Subject
                                              });

        Pupil[] pupils = [.. pupilsReader];

        // Write the results to the Console:
        foreach (Pupil pupil in pupils)
        {
            Console.WriteLine(pupil);
            Console.WriteLine();
        }

        // Pass the column names of the newly created CSV file:
        using (CsvWriter csvWriter = Csv.OpenWrite(filePath, ["Name", "Subject", "Weekday", "Begin"]))
        using (CsvWriter&lt;Pupil&gt; pupilsWriter =
            CsvMapping.OpenWrite&lt;Pupil&gt;(csvWriter,
                                        mapping,
                                        static (pupil, dyn) =&gt;
                                        {
                                            dyn.Name = pupil.Name;
                                            dyn.LessonBegin = pupil.LessonBegin;
                                            dyn.LessonDay = pupil.LessonDay;
                                            dyn.Subject = pupil.Subject;
                                        }))
        {
            foreach (Pupil pupil in pupils)
            {
                pupilsWriter.Write(pupil);
            }
        }

        Console.WriteLine(File.ReadAllText(filePath));
    }
}

/*
Console output: 

Name:        Susi
Subject:     Piano
LessonDay:   DayOfWeek.Wednesday
LessonBegin: 14:30:00

Name:        Carl Czerny
Subject:     Piano
LessonDay:   DayOfWeek.Thursday
LessonBegin: 15:15:00

Name:        Frederic Chopin
Subject:     &lt;null&gt;
LessonDay:   &lt;null&gt;
LessonBegin: &lt;null&gt;

Name,Subject,Weekday,Begin
Susi,Piano,3,
Carl Czerny,Piano,4,
Frederic Chopin,,,
*/</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Exceptions</h2><div id="IDHCSection"><table class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noopener noreferrer">ArgumentNullException</a></td><td><span class="parameter">writer</span>, or <span class="parameter">mapping</span>, 
            or <span class="parameter">conversion</span> is <span class="code">null</span>.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping Class</a></div><div><a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Type Parameters</a></li><li><a class="quickLink">Return Value</a></li></ul></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Exceptions</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>