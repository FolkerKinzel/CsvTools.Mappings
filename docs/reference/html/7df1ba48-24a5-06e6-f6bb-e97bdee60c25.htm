<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CsvMapping Class</title><meta name="Title" content="CsvMapping" /><meta name="Help.Id" content="T:FolkerKinzel.CsvTools.Mappings.CsvMapping" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.CsvTools.Mappings" /><meta name="guid" content="7df1ba48-24a5-06e6-f6bb-e97bdee60c25" /><meta name="Description" content="Mapping for instances." /><meta name="tocFile" content="../toc/IDB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.CsvTools.Mappings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Csv<wbr />Mapping Class</h1><div class="summary">
            Mapping for <a href="6b3d332f-0d34-761d-a6cf-ad02d3660fe6.htm">CsvRecord</a> instances.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings</a><br /><strong>Assembly:</strong> FolkerKinzel.CsvTools.Mappings (in FolkerKinzel.CsvTools.Mappings.dll) Version: 1.0.0-beta.1+645ec9cbfcfcba2e869d5de472ee3fb83db2e675<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">CsvMapping</span> : <span class="identifier">DynamicObject</span>, 
	<span class="identifier">IEnumerable</span>&lt;<span class="identifier">DynamicProperty</span>&gt;, <span class="identifier">IEnumerable</span>, <span class="identifier">ICloneable</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">CsvMapping</span>
	<span class="keyword">Inherits</span> <span class="identifier">DynamicObject</span>
	<span class="keyword">Implements</span> <span class="identifier">IEnumerable</span>(<span class="keyword">Of</span> <span class="identifier">DynamicProperty</span>), <span class="identifier">IEnumerable</span>, 
	<span class="identifier">ICloneable</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">CsvMapping</span> <span class="keyword">sealed</span> : <span class="keyword">public</span> <span class="identifier">DynamicObject</span>, 
	<span class="identifier">IEnumerable</span>&lt;<span class="identifier">DynamicProperty</span>^&gt;, <span class="identifier">IEnumerable</span>, <span class="identifier">ICloneable</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">CsvMapping</span> = 
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">DynamicObject</span>
        <span class="keyword">interface</span> <span class="identifier">IEnumerable</span>&lt;<span class="identifier">DynamicProperty</span>&gt;
        <span class="keyword">interface</span> <span class="identifier">IEnumerable</span>
        <span class="keyword">interface</span> <span class="identifier">ICloneable</span>
    <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.dynamic.dynamicobject" target="_blank" rel="noopener noreferrer">DynamicObject</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">CsvMapping</span></dd></dl><dl class="implementsList"><dt>Implements</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank" rel="noopener noreferrer">IEnumerable</a><span id="LSTE674C7FB_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a><span id="LSTE674C7FB_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, <a href="https://learn.microsoft.com/dotnet/api/system.collections.ienumerable" target="_blank" rel="noopener noreferrer">IEnumerable</a>, <a href="https://learn.microsoft.com/dotnet/api/system.icloneable" target="_blank" rel="noopener noreferrer">ICloneable</a></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDBCSection"><p>Use <a href="e14004a1-f4e6-6381-4332-51c7931cdc1d.htm">CsvMappingBuilder</a> to create an instance.</p><p>
            The class allows you to index the data of the <a href="6b3d332f-0d34-761d-a6cf-ad02d3660fe6.htm">CsvRecord</a>
            object in a sequence of your choice, to access the data with .NET properties dynamically
            implemented at runtime ("late binding"), and to  perform type conversions automatically. 
            In order to be able to use the dynamic properties of the <span class="selflink">CsvMapping</span> class 
            like regular .NET properties, the <span class="selflink">CsvMapping</span> instance has to be assigned to
            a variable that is declared with the keyword <span class="code">dynamic</span>.
            </p><p>
            Use the methods of the <a href="c0a71066-45f5-2019-09fd-807d0b636815.htm">CsvConverter</a> class or the corresponding extension 
            methods to perform read and write operations with the <span class="selflink">CsvMapping</span>.
            </p><p>
            In order to support high-performance scenarios, the <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances
            of the <span class="selflink">CsvMapping</span> alternatively can be accessed directly without having to 
            use dynamic .NET properties:
            </p><ul><li>Use the indexers <a href="ec2e90eb-92d2-61ad-3595-ae6e1a7b44ad.htm">Item<span id="LSTE674C7FB_2" data-languageSpecificText="cs=[|vb=(|cpp=[|nu=(|fs= "></span>Int32<span id="LSTE674C7FB_3" data-languageSpecificText="cs=]|vb=)|cpp=]|nu=)|fs= "></span></a> or <a href="32d139b6-9099-4a6c-3071-6cc1576bb722.htm">Item<span id="LSTE674C7FB_4" data-languageSpecificText="cs=[|vb=(|cpp=[|nu=(|fs= "></span>String<span id="LSTE674C7FB_5" data-languageSpecificText="cs=]|vb=)|cpp=]|nu=)|fs= "></span></a> to get a 
            <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instance.</li><li>Then cast it with <a href="066f9094-d905-bd46-200f-51095cc1a8d4.htm">AsITypedProperty<span id="LSTE674C7FB_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTE674C7FB_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(DynamicProperty)</a>
            and access its data directly with <a href="8b96ee29-b083-b709-ba97-c106631ce3f0.htm">Value</a>.</li></ul><p>
            With this approach boxing and unboxing of value types can be avoided.
            </p><p>
            Unfortunately, for dynamic properties, the compiler does not monitor the nullability of 
            reference types. With the high-performance approach just presented this can be avoided, 
            but a critical point here is the correct type cast with the 
            <a href="066f9094-d905-bd46-200f-51095cc1a8d4.htm">AsITypedProperty<span id="LSTE674C7FB_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTE674C7FB_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(DynamicProperty)</a> method: 
            Make sure that you choose the correct nullability of the reference types here. The compiler
            can't check this.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDCCSection"><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body">In the following code examples - for easier readability - exception 
            handling has been omitted.</div></article><p>
            Saving the contents of a <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a> as a CSV file and importing data from
            a CSV file into a <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a>: </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
// A namespace alias helps to avoid name conflicts
// with the converters from System.ComponentModel
using Conv = FolkerKinzel.CsvTools.Mappings.TypeConverters;
using System.Data;
using System.Globalization;

namespace Examples;

internal static class DataTableExample
{
    public static void DataTableWriteReadCsv(string filePath)
    {
        using var dataTable = new DataTable();

        dataTable.Columns.Add(new DataColumn("not_used", typeof(int)));
        dataTable.Columns.Add(new DataColumn("name"));
        dataTable.Columns.Add(new DataColumn("subject"));
        dataTable.Columns.Add(new DataColumn("day", typeof(DayOfWeek)));
        dataTable.Columns.Add(new DataColumn("lesson start", typeof(TimeOnly)));

        // The DataColumn.Caption property allows you to override the DataColumn.ColumnName property
        // when the ColumnName does not meet C# identifier requirements. The values ​​of the
        // DataColumn.Caption properties must be unique for CSV serialization (case-insensitive,
        // like DataColumn.ColumnName).
        dataTable.Columns["lesson start"]!.Caption = "begin";

        _ = dataTable.Rows.Add(
            [4711, "Susi Meyer", "Piano", DayOfWeek.Wednesday, new TimeOnly(14, 30, 0)]);
        _ = dataTable.Rows.Add(
            [0, "Carl Czerny", "Piano", DayOfWeek.Thursday, new TimeOnly(15, 15, 0)]);
        _ = dataTable.Rows.Add(
            [111, "Frederic Chopin", "Piano"]);

        // Store the stringConverter because you can reuse the same 
        // converter for more than one property in CsvRecordWrapper.
        Conv::TypeConverter&lt;object&gt; stringConverter
            = Conv::StringConverter.CreateNullable().ToDBNullConverter();

        // Each dynamic property name of the Mapping has to have a corresponding column in
        // the DataTable - corresponding in the DataColumn.Caption property (case-insensitive)
        // and the accepted data type. Mapping properties and DataColumns don't need to
        // correspond in their number and order and they don't need to match the columns of
        // the CSV file:
        CsvMapping mapping = CsvMappingBuilder
            .Create()
            .AddProperty("Name", stringConverter)
            .AddProperty("Subject", stringConverter)
            .AddProperty("Day", new Conv::EnumConverter&lt;DayOfWeek&gt;(format: "G")
                                .ToNullableConverter()
                                .ToDBNullConverter())
            .AddProperty("Begin", ["begin", "*start"], new Conv::TimeOnlyConverter()
                                                       .ToNullableConverter()
                                                       .ToDBNullConverter())
            .Build();

        // Write the CSV file:
        // (The column names determine which DataColumns will be part of the CSV
        // and their order in the CSV file.)
        dataTable.WriteCsv(filePath, 
                           ["Subject", "Lesson Start", "Name", "Day", "Reserved"],
                           mapping);

        dataTable.Clear();

        // Refill the DataTable from the CSV-file:
        dataTable.ReadCsv(filePath, mapping);

        Console.WriteLine("Csv file:");
        Console.WriteLine();
        Console.WriteLine(File.ReadAllText(filePath));
        Console.WriteLine();
        Console.WriteLine("Content of the refilled DataTable:");
        Utility.WriteConsole(dataTable);
    }

    /* 
   Console output:

   Csv file:

   Subject,Lesson Start,Name,Day,Reserved
   Piano,14:30:00,Susi Meyer,Wednesday,
   Piano,15:15:00,Carl Czerny,Thursday,
   Piano,,Frederic Chopin,,

   Content of the refilled DataTable:
   &lt;DBNull&gt;        Susi Meyer      Piano           3               14:30
   &lt;DBNull&gt;        Carl Czerny     Piano           4               15:15
   &lt;DBNull&gt;        Frederic Chopin Piano           &lt;DBNull&gt;        &lt;DBNull&gt;
   */
}</code></pre></div></div><p>Object serialization with CSV:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
// A namespace alias helps to avoid name conflicts
// with the converters from System.ComponentModel
using Conv = FolkerKinzel.CsvTools.Mappings.TypeConverters;
using System.Text;

namespace Examples;

internal sealed record Pupil(string? Name, string? Subject, DayOfWeek? LessonDay, TimeOnly? LessonBegin);

internal static class ObjectSerializationExample
{
    public static void CsvReadWritePupils(string filePath)
    {
        Pupil[] pupils = [
                            new("Susi", "Piano", DayOfWeek.Wednesday, new TimeOnly(14, 30)),
                            new("Carl Czerny", "Piano", DayOfWeek.Thursday, new TimeOnly(15, 15)),
                            new("Frederic Chopin", "Piano", null, null)
                         ];

        // Reuse a converter for more than one property:
        Conv::TypeConverter&lt;string?&gt; stringConverter = Conv::StringConverter.CreateNullable();

        // Initialize a Mapping that maps the data from
        // the CSV-Columns and converts it to the right data type.
        // Aliases with wildcards can be used to match the column-headers
        // of the CSV file. 
        CsvMapping mapping = CsvMappingBuilder
            .Create()
            .AddProperty("Name", ["*name"], stringConverter)
            .AddProperty("Subject", ["*subject", "*fach"], stringConverter)
            .AddProperty("LessonDay", ["*day", "*tag"], new Conv::EnumConverter&lt;DayOfWeek&gt;().ToNullableConverter())
            .AddProperty("LessonBegin", ["*begin?"], new Conv::TimeOnlyConverter().ToNullableConverter())
            .Build();

        // Create a nonstandard CSV-File as UTF-16 LE
        pupils.SaveCsv(filePath, 
                       ["Unterrichtstag", "Unterrichtsbeginn", "Vollständiger Name", "Unterrichtsfach"],
                       mapping, 
                       (pupil, dyn) =&gt;
                       {
                           dyn.Name = pupil.Name;
                           dyn.Subject = pupil.Subject;
                           dyn.LessonDay = pupil.LessonDay;
                           dyn.LessonBegin = pupil.LessonBegin;
                       },
                       textEncoding: Encoding.Unicode);

        // Reading analyzed will auto-detect the UTF-16 encoding:
        using CsvReader&lt;Pupil&gt; pupilsReader =
           CsvConverter.OpenReadAnalyzed&lt;Pupil&gt;(filePath,
                                                mapping,
                                                // dyn is mapping as a dynamic variable ("late binding")
                                                static dyn =&gt; new Pupil(dyn.Name,
                                                                        dyn.Subject,
                                                                        dyn.LessonDay,
                                                                        dyn.LessonBegin));

        pupils = [.. pupilsReader];

        // Write the results to the Console:
        foreach (Pupil pupil in pupils)
        {
            Console.WriteLine(pupil);
        }
    }
}

/*
Console output: 

Pupil { Name = Susi, Subject = Piano, LessonDay = Wednesday, LessonBegin = 14:30 }
Pupil { Name = Carl Czerny, Subject = Piano, LessonDay = Thursday, LessonBegin = 15:15 }
Pupil { Name = Frederic Chopin, Subject = Piano, LessonDay = , LessonBegin =  }
*/</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDMFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="2f3c3a24-4c53-d828-b2c7-2a1639553977.htm">Count</a></td><td>
            Gets the number of <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances in the <span class="selflink">CsvMapping</span>.
            </td></tr><tr><td><a href="ec2e90eb-92d2-61ad-3595-ae6e1a7b44ad.htm">Item<span id="LSTE674C7FB_10" data-languageSpecificText="cs=[|vb=(|cpp=[|nu=(|fs= "></span>Int32<span id="LSTE674C7FB_11" data-languageSpecificText="cs=]|vb=)|cpp=]|nu=)|fs= "></span></a></td><td>
            Gets the <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> with the specified <span class="parameter">index</span>. 
            </td></tr><tr><td><a href="32d139b6-9099-4a6c-3071-6cc1576bb722.htm">Item<span id="LSTE674C7FB_12" data-languageSpecificText="cs=[|vb=(|cpp=[|nu=(|fs= "></span>String<span id="LSTE674C7FB_13" data-languageSpecificText="cs=]|vb=)|cpp=]|nu=)|fs= "></span></a></td><td>
            Gets the <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> with the specified 
            <a href="01d6256d-bb76-35c9-4f82-60a9f3a876b7.htm">PropertyName</a>.
            </td></tr><tr><td><a href="a103b78b-ccf3-344b-6221-21be97323486.htm">PropertyNames</a></td><td>
            Returns the property names, which are currently registered in the <span class="selflink">CsvMapping</span>.
            </td></tr><tr><td><a href="20ed675f-8082-808d-9a8d-30564a810b25.htm">Record</a></td><td>
            Gets or sets the <a href="6b3d332f-0d34-761d-a6cf-ad02d3660fe6.htm">CsvRecord</a> instance whose data is accessed with 
            dynamic properties.
            </td></tr><tr><td><a href="b99531ed-6c56-7085-4a37-fb2288916a4c.htm">RegexTimeout</a></td><td>
            Maximum time (in milliseconds) that can be used to resolve a CSV column 
            name alias. 
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDEFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="71520544-508d-f907-7ec1-82ba0b976e34.htm">Clone</a></td><td>Creates a new object that is a copy of the current instance.</td></tr><tr><td><a href="db3c95cf-964d-fa38-c3ea-a3685b72ae58.htm">Contains</a></td><td>
            Examines whether a <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instance is registered in the 
            <span class="selflink">CsvMapping</span> under the name that is specified with <span class="parameter">propertyName</span>.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="2e1d86c6-0a51-3184-60d6-a98e49df776e.htm">GetEnumerator</a></td><td>Returns an enumerator that iterates through the collection.</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="f5f2cd2e-7848-31f8-4f84-4f28556fad95.htm">ToString</a></td><td>Returns a string that represents the current object.<br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noopener noreferrer">Object<span id="LSTE674C7FB_14" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LSTE674C7FB_15" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Extension Methods</h2><div id="IDAFASection"><table id="ExtensionList" class="table is-hoverable"><tr><td><a href="b0f9e116-8611-a034-78aa-c5f18ea51012.htm">SaveCsv<span id="LSTE674C7FB_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>DynamicProperty<span id="LSTE674C7FB_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Saves a collection of <span class="parameter">TData</span> instances as a CSV file
            with header row.
            <br />(Defined by <a href="c170cd6c-bab0-d3d3-eb4f-4241c51e9efc.htm">CsvConverterExtension</a>)</td></tr><tr><td><a href="0b6d81f2-a841-6b51-d65d-937e8e4240bb.htm">SaveCsv<span id="LSTE674C7FB_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>DynamicProperty<span id="LSTE674C7FB_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Saves a collection of <span class="parameter">TData</span> instances as a CSV file
            without a header row.
            <br />(Defined by <a href="c170cd6c-bab0-d3d3-eb4f-4241c51e9efc.htm">CsvConverterExtension</a>)</td></tr><tr><td><a href="ca7e918b-e0a5-3280-c8b8-5a89ebd35f5b.htm">ToCsv<span id="LSTE674C7FB_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>DynamicProperty<span id="LSTE674C7FB_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Converts a collection of <span class="parameter">TData</span> instances to a CSV 
            <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> without a header row.
            <br />(Defined by <a href="c170cd6c-bab0-d3d3-eb4f-4241c51e9efc.htm">CsvConverterExtension</a>)</td></tr><tr><td><a href="0d050f73-1a4a-d9b7-53d8-982657f9d6cd.htm">ToCsv<span id="LSTE674C7FB_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>DynamicProperty<span id="LSTE674C7FB_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Converts a collection of <span class="parameter">TData</span> instances to a CSV 
            <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> with header row.
            <br />(Defined by <a href="c170cd6c-bab0-d3d3-eb4f-4241c51e9efc.htm">CsvConverterExtension</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Explicit Interface Implementations</h2><div id="IDHFASection"><table id="ExplicitInterfaceImplementationList" class="table is-hoverable"><tr><td><a href="e5d330ac-cf5e-3440-decc-b931b7791ba0.htm">IEnumerable<span id="LSTE674C7FB_24" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetEnumerator</a></td><td>Returns an enumerator that iterates through a collection.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Thread Safety</h2><div id="IDDCSection">Static members of this type are not safe for multi-threaded operations. Instance members of this type are not safe for multi-threaded operations. </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Extension Methods</a></li><li><a class="quickLink">Explicit Interface Implementations</a></li><li><a class="quickLink">Thread Safety</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>