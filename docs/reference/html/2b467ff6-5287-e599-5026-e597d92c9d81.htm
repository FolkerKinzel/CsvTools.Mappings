<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CsvConverter.FillAnalyzed Method</title><meta name="Title" content="FillAnalyzed" /><meta name="Help.Id" content="M:FolkerKinzel.CsvTools.Mappings.CsvConverter.FillAnalyzed(System.Data.DataTable,System.String,FolkerKinzel.CsvTools.Mappings.CsvRecordMapping,FolkerKinzel.CsvTools.Header,System.Text.Encoding,System.Int32)" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.CsvTools.Mappings" /><meta name="guid" content="2b467ff6-5287-e599-5026-e597d92c9d81" /><meta name="Description" content="Adds the content of a CSV file as s to a after the CSV file had been analyzed." /><meta name="tocFile" content="../toc/IDAAB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.CsvTools.Mappings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Csv<wbr />Converter<span id="LST92B1A6BC_0" data-languageSpecificText="cpp=::|nu=."></span>Fill<wbr />Analyzed Method</h1><div class="summary">
            Adds the content of a CSV file as <a href="https://learn.microsoft.com/dotnet/api/system.data.datarow" target="_blank" rel="noopener noreferrer">DataRow</a>s to a <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a>
            after the CSV file had been analyzed.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings</a><br /><strong>Assembly:</strong> FolkerKinzel.CsvTools.Mappings (in FolkerKinzel.CsvTools.Mappings.dll) Version: 1.0.0-beta.1+128444f87360f5bbc1bb29064bf5b8703b7533db<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="identifier">FillAnalyzed</span>(
	<span class="identifier">DataTable</span> <span class="parameter">dataTable</span>,
	<span class="identifier">string</span> <span class="parameter">filePath</span>,
	<span class="identifier">CsvRecordMapping</span> <span class="parameter">mapping</span>,
	<span class="identifier">Header</span> <span class="parameter">header</span> = <span class="identifier">Header</span>.ProbablyPresent,
	<span class="identifier">Encoding</span>? <span class="parameter">textEncoding</span> = <span class="keyword">null</span>,
	<span class="identifier">int</span> <span class="parameter">analyzedLines</span> = 5
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Sub</span> <span class="identifier">FillAnalyzed</span> ( 
	<span class="parameter">dataTable</span> <span class="keyword">As</span> <span class="identifier">DataTable</span>,
	<span class="parameter">filePath</span> <span class="keyword">As</span> <span class="identifier">String</span>,
	<span class="parameter">mapping</span> <span class="keyword">As</span> <span class="identifier">CsvRecordMapping</span>,
	Optional <span class="parameter">header</span> <span class="keyword">As</span> <span class="identifier">Header</span> = <span class="identifier">Header</span>.ProbablyPresent,
	Optional <span class="parameter">textEncoding</span> <span class="keyword">As</span> <span class="identifier">Encoding</span> = <span class="keyword">Nothing</span>,
	Optional <span class="parameter">analyzedLines</span> <span class="keyword">As</span> <span class="identifier">Integer</span> = 5
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span>:
<span class="keyword">static</span> <span class="keyword">void</span> <span class="identifier">FillAnalyzed</span>(
	<span class="identifier">DataTable</span>^ <span class="parameter">dataTable</span>, 
	<span class="identifier">String</span>^ <span class="parameter">filePath</span>, 
	<span class="identifier">CsvRecordMapping</span>^ <span class="parameter">mapping</span>, 
	<span class="identifier">Header</span> <span class="parameter">header</span> = <span class="identifier">Header</span>::ProbablyPresent, 
	<span class="identifier">Encoding</span>^ <span class="parameter">textEncoding</span> = <span class="keyword">nullptr</span>, 
	<span class="identifier">int</span> <span class="parameter">analyzedLines</span> = 5
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs"><span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">FillAnalyzed</span> : 
        <span class="parameter">dataTable</span> : <span class="identifier">DataTable</span> * 
        <span class="parameter">filePath</span> : <span class="identifier">string</span> * 
        <span class="parameter">mapping</span> : <span class="identifier">CsvRecordMapping</span> * 
        ?<span class="parameter">header</span> : <span class="identifier">Header</span> * 
        ?<span class="parameter">textEncoding</span> : <span class="identifier">Encoding</span> * 
        ?<span class="parameter">analyzedLines</span> : <span class="identifier">int</span> 
(* Defaults:
        <span class="keyword">let </span><span class="identifier">_</span><span class="identifier">header</span> = defaultArg <span class="identifier">header</span> <span class="identifier">Header</span>.ProbablyPresent
        <span class="keyword">let </span><span class="identifier">_</span><span class="identifier">textEncoding</span> = defaultArg <span class="identifier">textEncoding</span> <span class="keyword">null</span>
        <span class="keyword">let </span><span class="identifier">_</span><span class="identifier">analyzedLines</span> = defaultArg <span class="identifier">analyzedLines</span> 5
*)
<span class="keyword">-&gt;</span> <span class="keyword">unit</span> </code></pre></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">dataTable</span>  <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a></dt><dd>The <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a> to which <a href="https://learn.microsoft.com/dotnet/api/system.data.datarow" target="_blank" rel="noopener noreferrer">DataRow</a>s
            are added.</dd><dt class="has-text-weight-normal"><span class="parameter">filePath</span>  <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a></dt><dd>File path of the CSV file.</dd><dt class="has-text-weight-normal"><span class="parameter">mapping</span>  <a href="f9d417b0-c675-a792-e538-87759eab8ed7.htm">CsvRecordMapping</a></dt><dd>The <a href="f9d417b0-c675-a792-e538-87759eab8ed7.htm">CsvRecordMapping</a> to be used.</dd><dt class="has-text-weight-normal"><span class="parameter">header</span>  <a href="0e207fe7-b6ad-9280-689f-779ab5678885.htm">Header</a>  (Optional)</dt><dd>A supposition that is made about the presence of a header row.</dd><dt class="has-text-weight-normal"><span class="parameter">textEncoding</span>  <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding" target="_blank" rel="noopener noreferrer">Encoding</a>  (Optional)</dt><dd>
            The text encoding to be used to read the CSV file, or <span class="code">null</span> to determine the <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding" target="_blank" rel="noopener noreferrer">Encoding</a>
            automatically from the byte order mark (BOM).
            </dd><dt class="has-text-weight-normal"><span class="parameter">analyzedLines</span>  <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a>  (Optional)</dt><dd>Maximum number of lines to analyze in the CSV file. The minimum 
            value is <a href="e1089601-0c54-4d91-7cd6-64716d66184d.htm">AnalyzedLinesMinCount</a>. If the file has fewer lines than 
            <span class="parameter">analyzedLines</span>, it will be analyzed completely. (You can specify 
            <a href="https://learn.microsoft.com/dotnet/api/system.int32.maxvalue" target="_blank" rel="noopener noreferrer">Int32.MaxValue</a> to analyze the entire file in any case.)</dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDHCSection"><p>
            Each <a href="01d6256d-bb76-35c9-4f82-60a9f3a876b7.htm">PropertyName</a> of <span class="parameter">mapping</span>
            MUST have a corresponding <a href="https://learn.microsoft.com/dotnet/api/system.data.datacolumn" target="_blank" rel="noopener noreferrer">DataColumn</a> in <span class="parameter">dataTable</span>
            - corresponding in the <a href="https://learn.microsoft.com/dotnet/api/system.data.datacolumn.caption" target="_blank" rel="noopener noreferrer">Caption</a> property (case-insensitive)
            and the accepted data type.
            </p><p>
            Effort must be taken that the 
            <a href="01d6256d-bb76-35c9-4f82-60a9f3a876b7.htm">PropertyName</a>s in <span class="parameter">mapping</span> are unique, 
            even when treated case-insensitive.
            </p><p>
            The <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances in <span class="parameter">mapping</span> don't need to match 
            all columns of the <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a> or all columns of the CSV file (neither in
            number nor in order).
            </p><p>
            The method performs a statistical analysis on the CSV file to find the appropriate 
            parameters for reading the file. The result of the analysis is therefore always only an estimate, 
            the accuracy of which increases with the number of lines analyzed. The analysis is time-consuming 
            because the CSV file has to be accessed for reading.
            </p><p>
            This method also automatically determines the <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding" target="_blank" rel="noopener noreferrer">Encoding</a> of the CSV file from the
            byte order mark (BOM) if the argument of the <span class="parameter">textEncoding</span> parameter is <span class="code">null</span>.
            If the <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding" target="_blank" rel="noopener noreferrer">Encoding</a> cannot be determined automatically, <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding.utf8" target="_blank" rel="noopener noreferrer">UTF8</a> is used.
            </p><p>
            The field delimiters COMMA (<span class="code">','</span>, %x2C), SEMICOLON  (<span class="code">';'</span>, %x3B), HASH (<span class="code">'#'</span>, %x23),
            TAB (<span class="code">'\t'</span>, %x09), and SPACE (<span class="code">' '</span>, %x20) are recognized automatically.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDICSection"><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body">In the following code examples - for easier readability - exception handling 
            has been omitted.</div></article><p>DataTable serialization with CSV:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
// A namespace alias helps to avoid name conflicts
// with the converters from System.ComponentModel
using Conv = FolkerKinzel.CsvTools.Mappings.TypeConverters;
using System.Data;
using System.Globalization;

namespace Examples;

internal static class DataTableExample
{
    public static void DataTableWriteReadCsv(string filePath)
    {
        using var dataTable = new DataTable();

        dataTable.Columns.Add(new DataColumn("not_used", typeof(int)));
        dataTable.Columns.Add(new DataColumn("name"));
        dataTable.Columns.Add(new DataColumn("subject"));
        dataTable.Columns.Add(new DataColumn("day", typeof(DayOfWeek)));
        dataTable.Columns.Add(new DataColumn("lesson start", typeof(TimeOnly)));

        // The DataColumn.Caption property allows you to override the DataColumn.ColumnName property
        // when the ColumnName does not meet C# identifier requirements. The values ​​of the
        // DataColumn.Caption properties must be unique for CSV serialization (case-insensitive,
        // like DataColumn.ColumnName).
        dataTable.Columns["lesson start"]!.Caption = "begin";

        _ = dataTable.Rows.Add(
            [4711, "Susi Meyer", "Piano", DayOfWeek.Wednesday, new TimeOnly(14, 30, 0)]);
        _ = dataTable.Rows.Add(
            [0, "Carl Czerny", "Piano", DayOfWeek.Thursday, new TimeOnly(15, 15, 0)]);
        _ = dataTable.Rows.Add(
            [111, "Frederic Chopin", "Piano"]);

        // Store the stringConverter because you can reuse the same 
        // converter for more than one property in CsvRecordWrapper.
        Conv::TypeConverter&lt;object&gt; stringConverter
            = Conv::StringConverter.CreateNullable().ToDBNullConverter();

        // Each dynamic property name of the Mapping has to have a corresponding column in
        // the DataTable - corresponding in the DataColumn.Caption property (case-insensitive)
        // and the accepted data type. Mapping properties and DataColumns don't need to
        // correspond in their number and order and they don't need to match the columns of
        // the CSV file:
        CsvRecordMapping mapping = CsvRecordMappingBuilder
            .Create()
            .AddProperty("Name", stringConverter)
            .AddProperty("Subject", stringConverter)
            .AddProperty("Day", new Conv::EnumConverter&lt;DayOfWeek&gt;(format: "G")
                                .ToNullableConverter()
                                .ToDBNullConverter())
            .AddProperty("Begin", ["begin", "*start"], new Conv::TimeOnlyConverter()
                                                       .ToNullableConverter()
                                                       .ToDBNullConverter())
            .Build();

        // Write the CSV file:
        // (The column names determine which DataColumns will be part of the CSV
        // and their order in the CSV file.)
        dataTable.WriteCsv(filePath, 
                           ["Subject", "Lesson Start", "Name", "Day", "Reserved"],
                           mapping);

        dataTable.Clear();

        // Refill the DataTable from the CSV-file:
        dataTable.ReadCsv(filePath, mapping);

        Console.WriteLine("Csv file:");
        Console.WriteLine();
        Console.WriteLine(File.ReadAllText(filePath));

        WriteConsole(dataTable);
    }

    private static void WriteConsole(DataTable dataTable)
    {
        Console.WriteLine();
        Console.WriteLine("Content of the refilled DataTable:");

        foreach (DataRow? dataRow in dataTable.Rows)
        {
            if (dataRow is null)
            {
                continue;
            }

            const int padding = 15;

            for (int i = 0; i &lt; dataTable.Columns.Count; i++)
            {
                object o = dataRow[i];
                Console.Write(o switch
                {
                    null =&gt; "&lt;null&gt;".PadRight(padding),
                    DBNull dBNull =&gt; "&lt;DBNull&gt;".PadRight(padding),
                    string s when s.Length == 0 =&gt; "\"\"".PadRight(padding),
                    TimeOnly ts =&gt; ts.ToString(CultureInfo.InvariantCulture).PadRight(padding),
                    _ =&gt; o.ToString()?.PadRight(padding)
                });
                Console.Write(' ');
            }

            Console.WriteLine();
        }
    }

    /* 
   Console output:

   Csv file:

   Subject,Lesson Start,Name,Day,Reserved
   Piano,14:30:00,Susi Meyer,Wednesday,
   Piano,15:15:00,Carl Czerny,Thursday,
   Piano,,Frederic Chopin,,

   Content of the refilled DataTable:
   &lt;DBNull&gt;        Susi Meyer      Piano           3               14:30
   &lt;DBNull&gt;        Carl Czerny     Piano           4               15:15
   &lt;DBNull&gt;        Frederic Chopin Piano           &lt;DBNull&gt;        &lt;DBNull&gt;
   */
}</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Exceptions</h2><div id="IDJCSection"><table class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noopener noreferrer">ArgumentNullException</a></td><td><span class="parameter">dataTable</span>, or <span class="parameter">filePath</span>,
            or <span class="parameter">mapping</span> is <span class="code">null</span>.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentexception" target="_blank" rel="noopener noreferrer">ArgumentException</a></td><td><p><span class="parameter">filePath</span> is not a valid file path.</p><p>- or -</p><p>
            There is a <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> in <span class="parameter">mapping</span> whose 
            <a href="01d6256d-bb76-35c9-4f82-60a9f3a876b7.htm">PropertyName</a> finds no corresponding <a href="https://learn.microsoft.com/dotnet/api/system.data.datacolumn.columnname" target="_blank" rel="noopener noreferrer">ColumnName</a>
            in <span class="parameter">dataTable</span>.
            </p></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.formatexception" target="_blank" rel="noopener noreferrer">FormatException</a></td><td>Parsing fails and <a href="60288c71-01a8-e2cf-b532-efe7c035dc96.htm">Throwing</a> is <span class="code">true</span>.</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.data.nonullallowedexception" target="_blank" rel="noopener noreferrer">NoNullAllowedException</a></td><td>The <span class="parameter">mapping</span> doesn't match the schema of
            the <span class="parameter">dataTable</span>.</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.data.constraintexception" target="_blank" rel="noopener noreferrer">ConstraintException</a></td><td>The parsed CSV data does not match the schema of
            the <span class="parameter">dataTable</span>.</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.io.ioexception" target="_blank" rel="noopener noreferrer">IOException</a></td><td>I/O error.</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.objectdisposedexception" target="_blank" rel="noopener noreferrer">ObjectDisposedException</a></td><td>The file was already closed.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="c0a71066-45f5-2019-09fd-807d0b636815.htm">CsvConverter Class</a></div><div><a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Exceptions</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>