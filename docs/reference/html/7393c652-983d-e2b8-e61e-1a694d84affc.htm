<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>MappingExtension.AddProperty&lt;T&gt;(Mapping, String, IEnumerable&lt;String&gt;, TypeConverter&lt;T&gt;) Method</title><meta name="Title" content="AddProperty&lt;T&gt;(Mapping, String, IEnumerable&lt;String&gt;, TypeConverter&lt;T&gt;)" /><meta name="Help.Id" content="M:FolkerKinzel.CsvTools.Mappings.MappingExtension.AddProperty``1(FolkerKinzel.CsvTools.Mappings.Mapping,System.String,System.Collections.Generic.IEnumerable{System.String},FolkerKinzel.CsvTools.Mappings.Converters.TypeConverter{``0})" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.CsvTools.Mappings" /><meta name="guid" content="7393c652-983d-e2b8-e61e-1a694d84affc" /><meta name="Description" content="Adds a new instance to the , which accesses a single column of a CSV file with header with a collection of column name aliases." /><meta name="tocFile" content="../toc/IDAAIB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.CsvTools.Mappings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Mapping<wbr />Extension<span id="LSTB1B4A089_0" data-languageSpecificText="cpp=::|nu=."></span>Add<wbr />Property<span id="LSTB1B4A089_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LSTB1B4A089_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>(Mapping, String, IEnumerable<span id="LSTB1B4A089_3" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span>String<span id="LSTB1B4A089_4" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, Type<wbr />Converter<span id="LSTB1B4A089_5" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LSTB1B4A089_6" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>) Method</h1><div class="summary">
            Adds a new <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instance to the <a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a>, which accesses a 
            single column of a CSV file with header with a collection of column name aliases.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings</a><br /><strong>Assembly:</strong> FolkerKinzel.CsvTools.Mappings (in FolkerKinzel.CsvTools.Mappings.dll) Version: 1.0.0-alpha.3+b62d1f5ca4b113f1b4c19b114b186994bb01c75b<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Mapping</span> <span class="identifier">AddProperty</span>&lt;T&gt;(
	<span class="keyword">this</span> <span class="identifier">Mapping</span> <span class="parameter">mapping</span>,
	<span class="identifier">string</span> <span class="parameter">propertyName</span>,
	<span class="identifier">IEnumerable</span>&lt;<span class="identifier">string</span>?&gt; <span class="parameter">columnNameAliases</span>,
	<span class="identifier">TypeConverter</span>&lt;T&gt; <span class="parameter">converter</span>
)
</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb">&lt;<span class="identifier">ExtensionAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">AddProperty</span>(<span class="keyword">Of</span> T) ( 
	<span class="parameter">mapping</span> <span class="keyword">As</span> <span class="identifier">Mapping</span>,
	<span class="parameter">propertyName</span> <span class="keyword">As</span> <span class="identifier">String</span>,
	<span class="parameter">columnNameAliases</span> <span class="keyword">As</span> <span class="identifier">IEnumerable</span>(<span class="keyword">Of</span> <span class="identifier">String</span>),
	<span class="parameter">converter</span> <span class="keyword">As</span> <span class="identifier">TypeConverter</span>(<span class="keyword">Of</span> T)
) <span class="keyword">As</span> <span class="identifier">Mapping</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span>:
[<span class="identifier">ExtensionAttribute</span>]
<span class="keyword">generic</span>&lt;<span class="keyword">typename</span> T&gt;
<span class="keyword">static</span> <span class="identifier">Mapping</span>^ <span class="identifier">AddProperty</span>(
	<span class="identifier">Mapping</span>^ <span class="parameter">mapping</span>, 
	<span class="identifier">String</span>^ <span class="parameter">propertyName</span>, 
	<span class="identifier">IEnumerable</span>&lt;<span class="identifier">String</span>^&gt;^ <span class="parameter">columnNameAliases</span>, 
	<span class="identifier">TypeConverter</span>&lt;T&gt;^ <span class="parameter">converter</span>
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">ExtensionAttribute</span>&gt;]
<span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">AddProperty</span> : 
        <span class="parameter">mapping</span> : <span class="identifier">Mapping</span> * 
        <span class="parameter">propertyName</span> : <span class="identifier">string</span> * 
        <span class="parameter">columnNameAliases</span> : <span class="identifier">IEnumerable</span>&lt;<span class="identifier">string</span>&gt; * 
        <span class="parameter">converter</span> : <span class="identifier">TypeConverter</span>&lt;'T&gt; <span class="keyword">-&gt;</span> <span class="identifier">Mapping</span> </code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">mapping</span>  <a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a></dt><dd>The <a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a> to add the <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> to.</dd><dt class="has-text-weight-normal"><span class="parameter">propertyName</span>  <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a></dt><dd>The identifier under which the property is addressed. It must follow the 
            rules for C# identifiers. Only ASCII characters are accepted.
            </dd><dt class="has-text-weight-normal"><span class="parameter">columnNameAliases</span>  <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank" rel="noopener noreferrer">IEnumerable</a><span id="LSTB1B4A089_7" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a><span id="LSTB1B4A089_8" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd><p>
            Column names of the CSV file that the <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> can access. The aliases can use the 
            wildcard characters '*' and '?'. 
            </p><p>
            The first alias, which is a match with a column name of the CSV file, is used. If a wildcard alias matches 
            several columns in the CSV file, the column with the lowest index is referenced.
            </p><p>
            The collection will be copied.
            </p></dd><dt class="has-text-weight-normal"><span class="parameter">converter</span>  <a href="c0d87f99-cb16-70e9-c054-47957d06c312.htm">TypeConverter</a><span id="LSTB1B4A089_9" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span><span id="LSTB1B4A089_10" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>The <a href="c0d87f99-cb16-70e9-c054-47957d06c312.htm">TypeConverter<span id="LSTB1B4A089_11" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB1B4A089_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> that does the type conversion.</dd></dl><h4 class="quickLinkHeader">Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd>The .NET data type of the dynamic property.</dd></dl><h4 class="quickLinkHeader">Return Value</h4><a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a><br /><span class="parameter">mapping</span> with the added <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> to chain calls.<h4 class="quickLinkHeader">Usage Note</h4>In Visual Basic and C#, you can call this method as an instance method on any object of type <a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a>. When you use instance method syntax to call this method, omit the first parameter. For more information, see <a href="https://docs.microsoft.com/dotnet/visual-basic/programming-guide/language-features/procedures/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (Visual Basic)</a> or <a href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (C# Programming Guide)</a>.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDHCSection"><p>
            Use this method if a CSV column name doesn't match the requirements of C# 
            identifiers, or if the CSV column name is unknown.
            </p><p>
            In the very special case where '*' is a letter of the column name, replace '*' with '?'.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDICSection"><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body">In the following code examples - for easier readability - exception handling has been omitted.</div></article><p>
            Saving the contents of a <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a> as a CSV file and importing data from a CSV file into a 
            <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a>: </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
using FolkerKinzel.CsvTools.Mappings.Converters;
using System.Data;
using System.Globalization;

namespace Examples;

internal static class DataTableExample
{
    public static void DataTableWriteReadCsv(string filePath)
    {
        using var dataTable = new DataTable();

        dataTable.Columns.Add(new DataColumn("not_used", typeof(int)));
        dataTable.Columns.Add(new DataColumn("name"));
        dataTable.Columns.Add(new DataColumn("subject"));
        dataTable.Columns.Add(new DataColumn("day", typeof(DayOfWeek)));
        dataTable.Columns.Add(new DataColumn("begin", typeof(TimeOnly)));

        _ = dataTable.Rows.Add(
            [4711, "Susi Meyer", "Piano", DayOfWeek.Wednesday, new TimeOnly(14, 30, 0)]);
        _ = dataTable.Rows.Add(
            [0, "Carl Czerny", "Piano", DayOfWeek.Thursday, new TimeOnly(15, 15, 0)]);
        _ = dataTable.Rows.Add(
            [111, "Frederic Chopin", "Piano"]);

        // Store the stringConverter because you can reuse the same 
        // converter for more than one property in CsvRecordWrapper.
        TypeConverter&lt;object&gt; stringConverter
            = StringConverter.CreateNullable().ToDBNullConverter();

        // All properties of the Mapping have to have a corresponding column
        // in the DataTable (corresponding in the case-insensitive ColumnName
        // and the accepted data type). They dont't need to correspond in their
        // order and they don't need to match neither the columns of the CSV file
        // nor all DataColumns of the DataTable:
        Mapping mapping = Mapping
            .Create()
            .AddProperty("Name", stringConverter)
            .AddProperty("Subject", stringConverter)
            .AddProperty("Day", new EnumConverter&lt;DayOfWeek&gt;(format: "G").ToDBNullConverter())
            .AddProperty("Begin", ["begin", "*start"], new TimeOnlyConverter().ToDBNullConverter());

        // Write the CSV file:
        // (The column names provided when initalizing the CsvWriter determine
        // which DataColumns will be part of the CSV and their order in the CSV file.)
        string[] columns =
            ["Subject", "Lesson Start", "Name", "Day", "Reserved"];

        using (CsvWriter writer = Csv.OpenWrite(filePath, columns))
        {
            dataTable.WriteCsv(writer, mapping);
        }

        dataTable.Clear();

        // Refill the DataTable from the CSV-file:
        using CsvReader reader = Csv.OpenRead(filePath);
        dataTable.ReadCsv(reader, mapping);

        Console.WriteLine("Csv file:");
        Console.WriteLine();
        Console.WriteLine(File.ReadAllText(filePath));

        WriteConsole(dataTable);
    }

    private static void WriteConsole(DataTable dataTable)
    {
        Console.WriteLine();
        Console.WriteLine("Content of the refilled DataTable:");

        foreach (DataRow? dataRow in dataTable.Rows)
        {
            if (dataRow is null)
            {
                continue;
            }

            const int padding = 15;

            for (int i = 0; i &lt; dataTable.Columns.Count; i++)
            {
                object o = dataRow[i];
                Console.Write(o switch
                {
                    null =&gt; "&lt;null&gt;".PadRight(padding),
                    DBNull dBNull =&gt; "&lt;DBNull&gt;".PadRight(padding),
                    string s when s.Length == 0 =&gt; "\"\"".PadRight(padding),
                    TimeOnly ts =&gt; ts.ToString(CultureInfo.InvariantCulture).PadRight(padding),
                    _ =&gt; o.ToString()?.PadRight(padding)
                });
                Console.Write(' ');
            }

            Console.WriteLine();
        }
    }

 /* 
Console output:

Csv file:

Subject,Lesson Start,Name,Day,Reserved
Piano,14:30:00,Susi Meyer,Wednesday,
Piano,15:15:00,Carl Czerny,Thursday,
Piano,,Frederic Chopin,,

Content of the refilled DataTable:
&lt;DBNull&gt;        Susi Meyer      Piano           3               14:30
&lt;DBNull&gt;        Carl Czerny     Piano           4               15:15
&lt;DBNull&gt;        Frederic Chopin Piano           &lt;DBNull&gt;        &lt;DBNull&gt;
*/
}</code></pre></div></div><p>Object serialization with CSV:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
using FolkerKinzel.CsvTools.Mappings.Converters;

namespace Examples;

internal sealed class Pupil
{
    public string? Name { get; set; }
    public string? Subject { get; set; }
    public DayOfWeek? LessonDay { get; set; }
    public TimeSpan? LessonBegin { get; set; }

    public override string ToString()
    {
        const string NULL = "&lt;null&gt;";
        string lessonDay = LessonDay.HasValue ? $"{nameof(DayOfWeek)}.{LessonDay}" : NULL;
        string lessonBegin = LessonBegin.HasValue ? LessonBegin.Value.ToString() : NULL;

        return $"""
            Name:        {Name ?? NULL}
            Subject:     {Subject ?? NULL}
            LessonDay:   {lessonDay}
            LessonBegin: {lessonBegin}
            """;
    }
}

internal static class ObjectSerializationExample
{
    public static void CsvReadWritePupils(string filePath)
    {
        // Create a nonstandard CSV-File
        File.WriteAllText(filePath, """
                Unterrichtstag;Unterrichtsbeginn;Vollständiger Name;Unterrichtsfach;
                Wednesday;14:30;Susi;Piano
                Thursday;15:15;Carl Czerny;Piano;
                ;;Frederic Chopin
                """);

        // Reuse a converter for more than one property:
        TypeConverter&lt;string?&gt; stringConverter = StringConverter.CreateNullable();

        // Initialize a Mapping that retrieves the data from
        // the CSV-Columns and converts it to the right data type.
        // Aliases with wildcards can be used to match the column-headers
        // of the CSV file. 
        Mapping mapping = Mapping
            .Create()
            .AddProperty("Name", ["*name"], stringConverter)
            .AddProperty("Subject", ["*subject", "*fach"], stringConverter)
            .AddProperty("LessonDay", ["*day", "*tag"], new EnumConverter&lt;DayOfWeek&gt;().ToNullableConverter())
            .AddProperty("LessonBegin", ["*begin?"], new TimeSpanConverter().ToNullableConverter());

        using CsvReader&lt;Pupil&gt; pupilsReader =
           CsvMapping.OpenReadAnalyzed&lt;Pupil&gt;(filePath,
                                              mapping,
                                              // dyn is mapping as a dynamic variable ("late binding")
                                              static dyn =&gt; new Pupil
                                              {
                                                  Name = dyn.Name,
                                                  LessonBegin = dyn.LessonBegin,
                                                  LessonDay = dyn.LessonDay,
                                                  Subject = dyn.Subject
                                              });

        Pupil[] pupils = [.. pupilsReader];

        // Write the results to the Console:
        foreach (Pupil pupil in pupils)
        {
            Console.WriteLine(pupil);
            Console.WriteLine();
        }

        // Pass the column names of the newly created CSV file:
        using (CsvWriter csvWriter = Csv.OpenWrite(filePath, ["Name", "Subject", "Weekday", "Begin"]))
        using (CsvWriter&lt;Pupil&gt; pupilsWriter =
            CsvMapping.OpenWrite&lt;Pupil&gt;(csvWriter,
                                        mapping,
                                        static (pupil, dyn) =&gt;
                                        {
                                            dyn.Name = pupil.Name;
                                            dyn.LessonBegin = pupil.LessonBegin;
                                            dyn.LessonDay = pupil.LessonDay;
                                            dyn.Subject = pupil.Subject;
                                        }))
        {
            foreach (Pupil pupil in pupils)
            {
                pupilsWriter.Write(pupil);
            }
        }

        Console.WriteLine(File.ReadAllText(filePath));
    }
}

/*
Console output: 

Name:        Susi
Subject:     Piano
LessonDay:   DayOfWeek.Wednesday
LessonBegin: 14:30:00

Name:        Carl Czerny
Subject:     Piano
LessonDay:   DayOfWeek.Thursday
LessonBegin: 15:15:00

Name:        Frederic Chopin
Subject:     &lt;null&gt;
LessonDay:   &lt;null&gt;
LessonBegin: &lt;null&gt;

Name,Subject,Weekday,Begin
Susi,Piano,3,
Carl Czerny,Piano,4,
Frederic Chopin,,,
*/</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Exceptions</h2><div id="IDJCSection"><table class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noopener noreferrer">ArgumentNullException</a></td><td><span class="parameter">mapping</span>, 
            or <span class="parameter">propertyName</span>, or <span class="parameter">columnNameAliases</span>, or <span class="parameter">converter</span>
            is <span class="code">null</span>.</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentexception" target="_blank" rel="noopener noreferrer">ArgumentException</a></td><td><p><span class="parameter">propertyName</span> does not conform to the rules for C# 
            identifiers (only ASCII characters)
            </p><p>- or -</p><p>
            a <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> with the same <a href="01d6256d-bb76-35c9-4f82-60a9f3a876b7.htm">PropertyName</a> has already been added.
            Check this beforehand with <a href="f8d525a0-25bc-b199-c597-61f54dc320df.htm">Contains(String)</a>!
            </p></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.regexmatchtimeoutexception" target="_blank" rel="noopener noreferrer">RegexMatchTimeoutException</a></td><td>
            Validating of <span class="parameter">propertyName</span> takes longer than <a href="e36c5cbc-e215-cb0c-5105-e4e9b1017f1a.htm">MaxRegexTimeout</a>.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="a2dec058-d600-64a5-7c37-d4010e038177.htm">MappingExtension Class</a></div><div><a href="b48307c6-f096-9207-1cb8-f017f3dba7b1.htm">AddProperty Overload</a></div><div><a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Type Parameters</a></li><li><a class="quickLink">Return Value</a></li><li><a class="quickLink">Usage Note</a></li></ul></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Exceptions</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>