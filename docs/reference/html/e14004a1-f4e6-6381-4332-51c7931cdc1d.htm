<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CsvMappingBuilder Class</title><meta name="Title" content="CsvMappingBuilder" /><meta name="Help.Id" content="T:FolkerKinzel.CsvTools.Mappings.CsvMappingBuilder" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.CsvTools.Mappings" /><meta name="guid" content="e14004a1-f4e6-6381-4332-51c7931cdc1d" /><meta name="Description" content="Builder for instances." /><meta name="tocFile" content="../toc/IDB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.CsvTools.Mappings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Csv<wbr />Mapping<wbr />Builder Class</h1><div class="summary">
            Builder for <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a> instances.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings</a><br /><strong>Assembly:</strong> FolkerKinzel.CsvTools.Mappings (in FolkerKinzel.CsvTools.Mappings.dll) Version: 1.0.0-beta.1+645ec9cbfcfcba2e869d5de472ee3fb83db2e675<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">CsvMappingBuilder</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">CsvMappingBuilder</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">CsvMappingBuilder</span> <span class="keyword">sealed</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">CsvMappingBuilder</span> = <span class="keyword">class</span> <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">CsvMappingBuilder</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDBCSection"><p>
            An instance of the <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> class represents a dynamic
            property ("late binding") of the <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a> object that can be 
            used like a regular .NET property if the <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a> instance is 
            assigned to a variable that is declared with the keyword <span class="code">dynamic</span>.
            </p><p>
            The <span class="code">AddProperty</span> methods of <span class="selflink">CsvMappingBuilder</span> allow to create 
            and add <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances. 
            The order, in which the <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances are added, determines
            their index in the newly created <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a> instance. These indexes may 
            differ from the indexes of the columns of the CSV file that these 
            <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances access.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDCCSection"><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body">In the following code examples - for easier readability - exception 
            handling has been omitted.</div></article><p>
            Saving the contents of a <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a> as a CSV file and importing data 
            from a CSV file into a <a href="https://learn.microsoft.com/dotnet/api/system.data.datatable" target="_blank" rel="noopener noreferrer">DataTable</a>: </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
// A namespace alias helps to avoid name conflicts
// with the converters from System.ComponentModel
using Conv = FolkerKinzel.CsvTools.Mappings.TypeConverters;
using System.Data;
using System.Globalization;

namespace Examples;

internal static class DataTableExample
{
    public static void DataTableWriteReadCsv(string filePath)
    {
        using var dataTable = new DataTable();

        dataTable.Columns.Add(new DataColumn("not_used", typeof(int)));
        dataTable.Columns.Add(new DataColumn("name"));
        dataTable.Columns.Add(new DataColumn("subject"));
        dataTable.Columns.Add(new DataColumn("day", typeof(DayOfWeek)));
        dataTable.Columns.Add(new DataColumn("lesson start", typeof(TimeOnly)));

        // The DataColumn.Caption property allows you to override the DataColumn.ColumnName property
        // when the ColumnName does not meet C# identifier requirements. The values ​​of the
        // DataColumn.Caption properties must be unique for CSV serialization (case-insensitive,
        // like DataColumn.ColumnName).
        dataTable.Columns["lesson start"]!.Caption = "begin";

        _ = dataTable.Rows.Add(
            [4711, "Susi Meyer", "Piano", DayOfWeek.Wednesday, new TimeOnly(14, 30, 0)]);
        _ = dataTable.Rows.Add(
            [0, "Carl Czerny", "Piano", DayOfWeek.Thursday, new TimeOnly(15, 15, 0)]);
        _ = dataTable.Rows.Add(
            [111, "Frederic Chopin", "Piano"]);

        // Store the stringConverter because you can reuse the same 
        // converter for more than one property in CsvRecordWrapper.
        Conv::TypeConverter&lt;object&gt; stringConverter
            = Conv::StringConverter.CreateNullable().ToDBNullConverter();

        // Each dynamic property name of the Mapping has to have a corresponding column in
        // the DataTable - corresponding in the DataColumn.Caption property (case-insensitive)
        // and the accepted data type. Mapping properties and DataColumns don't need to
        // correspond in their number and order and they don't need to match the columns of
        // the CSV file:
        CsvMapping mapping = CsvMappingBuilder
            .Create()
            .AddProperty("Name", stringConverter)
            .AddProperty("Subject", stringConverter)
            .AddProperty("Day", new Conv::EnumConverter&lt;DayOfWeek&gt;(format: "G")
                                .ToNullableConverter()
                                .ToDBNullConverter())
            .AddProperty("Begin", ["begin", "*start"], new Conv::TimeOnlyConverter()
                                                       .ToNullableConverter()
                                                       .ToDBNullConverter())
            .Build();

        // Write the CSV file:
        // (The column names determine which DataColumns will be part of the CSV
        // and their order in the CSV file.)
        dataTable.WriteCsv(filePath, 
                           ["Subject", "Lesson Start", "Name", "Day", "Reserved"],
                           mapping);

        dataTable.Clear();

        // Refill the DataTable from the CSV-file:
        dataTable.ReadCsv(filePath, mapping);

        Console.WriteLine("Csv file:");
        Console.WriteLine();
        Console.WriteLine(File.ReadAllText(filePath));
        Console.WriteLine();
        Console.WriteLine("Content of the refilled DataTable:");
        Utility.WriteConsole(dataTable);
    }

    /* 
   Console output:

   Csv file:

   Subject,Lesson Start,Name,Day,Reserved
   Piano,14:30:00,Susi Meyer,Wednesday,
   Piano,15:15:00,Carl Czerny,Thursday,
   Piano,,Frederic Chopin,,

   Content of the refilled DataTable:
   &lt;DBNull&gt;        Susi Meyer      Piano           3               14:30
   &lt;DBNull&gt;        Carl Czerny     Piano           4               15:15
   &lt;DBNull&gt;        Frederic Chopin Piano           &lt;DBNull&gt;        &lt;DBNull&gt;
   */
}</code></pre></div></div><p>Object serialization with CSV:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
// A namespace alias helps to avoid name conflicts
// with the converters from System.ComponentModel
using Conv = FolkerKinzel.CsvTools.Mappings.TypeConverters;
using System.Text;

namespace Examples;

internal sealed record Pupil(string? Name, string? Subject, DayOfWeek? LessonDay, TimeOnly? LessonBegin);

internal static class ObjectSerializationExample
{
    public static void CsvReadWritePupils(string filePath)
    {
        Pupil[] pupils = [
                            new("Susi", "Piano", DayOfWeek.Wednesday, new TimeOnly(14, 30)),
                            new("Carl Czerny", "Piano", DayOfWeek.Thursday, new TimeOnly(15, 15)),
                            new("Frederic Chopin", "Piano", null, null)
                         ];

        // Reuse a converter for more than one property:
        Conv::TypeConverter&lt;string?&gt; stringConverter = Conv::StringConverter.CreateNullable();

        // Initialize a Mapping that maps the data from
        // the CSV-Columns and converts it to the right data type.
        // Aliases with wildcards can be used to match the column-headers
        // of the CSV file. 
        CsvMapping mapping = CsvMappingBuilder
            .Create()
            .AddProperty("Name", ["*name"], stringConverter)
            .AddProperty("Subject", ["*subject", "*fach"], stringConverter)
            .AddProperty("LessonDay", ["*day", "*tag"], new Conv::EnumConverter&lt;DayOfWeek&gt;().ToNullableConverter())
            .AddProperty("LessonBegin", ["*begin?"], new Conv::TimeOnlyConverter().ToNullableConverter())
            .Build();

        // Create a nonstandard CSV-File as UTF-16 LE
        pupils.SaveCsv(filePath, 
                       ["Unterrichtstag", "Unterrichtsbeginn", "Vollständiger Name", "Unterrichtsfach"],
                       mapping, 
                       (pupil, dyn) =&gt;
                       {
                           dyn.Name = pupil.Name;
                           dyn.Subject = pupil.Subject;
                           dyn.LessonDay = pupil.LessonDay;
                           dyn.LessonBegin = pupil.LessonBegin;
                       },
                       textEncoding: Encoding.Unicode);

        // Reading analyzed will auto-detect the UTF-16 encoding:
        using CsvReader&lt;Pupil&gt; pupilsReader =
           CsvConverter.OpenReadAnalyzed&lt;Pupil&gt;(filePath,
                                                mapping,
                                                // dyn is mapping as a dynamic variable ("late binding")
                                                static dyn =&gt; new Pupil(dyn.Name,
                                                                        dyn.Subject,
                                                                        dyn.LessonDay,
                                                                        dyn.LessonBegin));

        pupils = [.. pupilsReader];

        // Write the results to the Console:
        foreach (Pupil pupil in pupils)
        {
            Console.WriteLine(pupil);
        }
    }
}

/*
Console output: 

Pupil { Name = Susi, Subject = Piano, LessonDay = Wednesday, LessonBegin = 14:30 }
Pupil { Name = Carl Czerny, Subject = Piano, LessonDay = Thursday, LessonBegin = 15:15 }
Pupil { Name = Frederic Chopin, Subject = Piano, LessonDay = , LessonBegin =  }
*/</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDBEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="b0361223-c9e1-739f-7b4d-8001797fba81.htm">AddProperty<span id="LSTBB11901C_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTBB11901C_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(String, MultiColumnTypeConverter<span id="LSTBB11901C_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTBB11901C_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Adds a new <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instance that accesses 
            several columns of a CSV file.
            </td></tr><tr><td><a href="15ed6d56-5f1e-1a58-4e90-4ce10e97d29e.htm">AddProperty<span id="LSTBB11901C_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTBB11901C_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(String, TypeConverter<span id="LSTBB11901C_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTBB11901C_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Adds a new <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instance that accesses a single 
            column of a CSV file with its column name.
            
            </td></tr><tr><td><a href="a8d25b96-86ae-df7e-f870-660ac6470268.htm">AddProperty<span id="LSTBB11901C_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTBB11901C_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(String, IEnumerable<span id="LSTBB11901C_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String<span id="LSTBB11901C_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, TypeConverter<span id="LSTBB11901C_12" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTBB11901C_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Adds a new <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instance that accesses a 
            single column of a CSV file with a collection of column name aliases.
            </td></tr><tr><td><a href="80f709aa-03cf-8ed1-10f3-1b41eabb10b5.htm">AddProperty<span id="LSTBB11901C_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTBB11901C_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(String, Int32, TypeConverter<span id="LSTBB11901C_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTBB11901C_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Adds a new <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instance that accesses a single 
            column of the CSV file with its index.
            </td></tr><tr><td><a href="c1a56444-2f98-6466-6867-543951e03394.htm">Build</a></td><td>
            Builds a new <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a> instance from the contents of 
            <span class="selflink">CsvMappingBuilder</span> and deletes all contents of 
            <span class="selflink">CsvMappingBuilder</span> on return.
            </td></tr><tr><td><a href="ed9e343d-03ab-5808-45e2-74d8979a7884.htm">Create</a></td><td>
            Creates a new <span class="selflink">CsvMappingBuilder</span> instance.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>