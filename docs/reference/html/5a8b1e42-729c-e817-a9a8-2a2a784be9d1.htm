<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CsvConverterExtension.SaveCsv&lt;TData&gt;(IEnumerable&lt;TData&gt;, String, CsvMapping, Action&lt;TData, Object&gt;, Char, Encoding, IReadOnlyCollection&lt;String&gt;) Method</title><meta name="Title" content="SaveCsv&lt;TData&gt;(IEnumerable&lt;TData&gt;, String, CsvMapping, Action&lt;TData, Object&gt;, Char, Encoding, IReadOnlyCollection&lt;String&gt;)" /><meta name="Help.Id" content="M:FolkerKinzel.CsvTools.Mappings.CsvConverterExtension.SaveCsv``1(System.Collections.Generic.IEnumerable{``0},System.String,FolkerKinzel.CsvTools.Mappings.CsvMapping,System.Action{``0,System.Object},System.Char,System.Text.Encoding,System.Collections.Generic.IReadOnlyCollection{System.String})" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.CsvTools.Mappings" /><meta name="guid" content="5a8b1e42-729c-e817-a9a8-2a2a784be9d1" /><meta name="Description" content="Saves a collection of instances as a CSV file with header row." /><meta name="tocFile" content="../toc/IDAABB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.CsvTools.Mappings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Csv<wbr />Converter<wbr />Extension<span id="LST35365A71_0" data-languageSpecificText="cpp=::|nu=."></span>Save<wbr />Csv<span id="LST35365A71_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">TData</span><span id="LST35365A71_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>(IEnumerable<span id="LST35365A71_3" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">TData</span><span id="LST35365A71_4" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, String, Csv<wbr />Mapping, Action<span id="LST35365A71_5" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">TData</span>, Object<span id="LST35365A71_6" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, Char, Encoding, IRead<wbr />Only<wbr />Collection<span id="LST35365A71_7" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span>String<span id="LST35365A71_8" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>) Method</h1><div class="summary">
             Saves a collection of <span class="parameter">TData</span> instances as a CSV file
             with header row.
             </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings</a><br /><strong>Assembly:</strong> FolkerKinzel.CsvTools.Mappings (in FolkerKinzel.CsvTools.Mappings.dll) Version: 1.0.0+9a361be2cf99f6b1943b70cd0acb1fb8663893c0<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="identifier">SaveCsv</span>&lt;TData&gt;(
	<span class="keyword">this</span> <span class="identifier">IEnumerable</span>&lt;TData&gt; <span class="parameter">data</span>,
	<span class="identifier">string</span> <span class="parameter">filePath</span>,
	<span class="identifier">CsvMapping</span> <span class="parameter">mapping</span>,
	<span class="identifier">Action</span>&lt;TData, <span class="identifier">Object</span>&gt; <span class="parameter">conversion</span>,
	<span class="identifier">char</span> <span class="parameter">delimiter</span> = ',',
	<span class="identifier">Encoding</span>? <span class="parameter">textEncoding</span> = <span class="keyword">null</span>,
	<span class="identifier">IReadOnlyCollection</span>&lt;<span class="identifier">string</span>?&gt;? <span class="parameter">columnNames</span> = <span class="keyword">null</span>
)
</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb">&lt;<span class="identifier">ExtensionAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Sub</span> <span class="identifier">SaveCsv</span>(<span class="keyword">Of</span> TData) ( 
	<span class="parameter">data</span> <span class="keyword">As</span> <span class="identifier">IEnumerable</span>(<span class="keyword">Of</span> TData),
	<span class="parameter">filePath</span> <span class="keyword">As</span> <span class="identifier">String</span>,
	<span class="parameter">mapping</span> <span class="keyword">As</span> <span class="identifier">CsvMapping</span>,
	<span class="parameter">conversion</span> <span class="keyword">As</span> <span class="identifier">Action</span>(<span class="keyword">Of</span> TData, <span class="identifier">Object</span>),
	Optional <span class="parameter">delimiter</span> <span class="keyword">As</span> <span class="identifier">Char</span> = ","C,
	Optional <span class="parameter">textEncoding</span> <span class="keyword">As</span> <span class="identifier">Encoding</span> = <span class="keyword">Nothing</span>,
	Optional <span class="parameter">columnNames</span> <span class="keyword">As</span> <span class="identifier">IReadOnlyCollection</span>(<span class="keyword">Of</span> <span class="identifier">String</span>) = <span class="keyword">Nothing</span>
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span>:
[<span class="identifier">ExtensionAttribute</span>]
<span class="keyword">generic</span>&lt;<span class="keyword">typename</span> TData&gt;
<span class="keyword">static</span> <span class="keyword">void</span> <span class="identifier">SaveCsv</span>(
	<span class="identifier">IEnumerable</span>&lt;TData&gt;^ <span class="parameter">data</span>, 
	<span class="identifier">String</span>^ <span class="parameter">filePath</span>, 
	<span class="identifier">CsvMapping</span>^ <span class="parameter">mapping</span>, 
	<span class="identifier">Action</span>&lt;TData, <span class="identifier">Object</span>^&gt;^ <span class="parameter">conversion</span>, 
	<span class="identifier">wchar_t</span> <span class="parameter">delimiter</span> = L',', 
	<span class="identifier">Encoding</span>^ <span class="parameter">textEncoding</span> = <span class="keyword">nullptr</span>, 
	<span class="identifier">IReadOnlyCollection</span>&lt;<span class="identifier">String</span>^&gt;^ <span class="parameter">columnNames</span> = <span class="keyword">nullptr</span>
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">ExtensionAttribute</span>&gt;]
<span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">SaveCsv</span> : 
        <span class="parameter">data</span> : <span class="identifier">IEnumerable</span>&lt;'TData&gt; * 
        <span class="parameter">filePath</span> : <span class="identifier">string</span> * 
        <span class="parameter">mapping</span> : <span class="identifier">CsvMapping</span> * 
        <span class="parameter">conversion</span> : <span class="identifier">Action</span>&lt;'TData, <span class="identifier">Object</span>&gt; * 
        ?<span class="parameter">delimiter</span> : <span class="identifier">char</span> * 
        ?<span class="parameter">textEncoding</span> : <span class="identifier">Encoding</span> * 
        ?<span class="parameter">columnNames</span> : <span class="identifier">IReadOnlyCollection</span>&lt;<span class="identifier">string</span>&gt; 
(* Defaults:
        <span class="keyword">let </span><span class="identifier">_</span><span class="identifier">delimiter</span> = defaultArg <span class="identifier">delimiter</span> ','
        <span class="keyword">let </span><span class="identifier">_</span><span class="identifier">textEncoding</span> = defaultArg <span class="identifier">textEncoding</span> <span class="keyword">null</span>
        <span class="keyword">let </span><span class="identifier">_</span><span class="identifier">columnNames</span> = defaultArg <span class="identifier">columnNames</span> <span class="keyword">null</span>
*)
<span class="keyword">-&gt;</span> <span class="keyword">unit</span> </code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">data</span>  <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank" rel="noopener noreferrer">IEnumerable</a><span id="LST35365A71_9" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">TData</span></span><span id="LST35365A71_10" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>The data to save as CSV file. Each item will be represented with 
             a CSV row.
             </dd><dt class="has-text-weight-normal"><span class="parameter">filePath</span>  <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a></dt><dd>File path of the CSV file.</dd><dt class="has-text-weight-normal"><span class="parameter">mapping</span>  <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a></dt><dd>The <a href="7df1ba48-24a5-06e6-f6bb-e97bdee60c25.htm">CsvMapping</a> used to convert a
             <span class="parameter">TData</span> instance to a CSV row.</dd><dt class="has-text-weight-normal"><span class="parameter">conversion</span>  <a href="https://learn.microsoft.com/dotnet/api/system.action-2" target="_blank" rel="noopener noreferrer">Action</a><span id="LST35365A71_11" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">TData</span></span>, <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a><span id="LST35365A71_12" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd><p>
             A method that fills the content of a <span class="parameter">TData</span> instance
             into the properties of <span class="parameter">mapping</span>. 
             </p><p><span class="parameter">conversion</span> is called with each CSV row to be written and it
             gets the <span class="parameter">TData</span> instance and <span class="parameter">mapping</span> as
             arguments. <span class="parameter">mapping</span>
             is passed to the method as <span class="code">dynamic</span> argument: Inside the 
             <span class="parameter">conversion</span> method the registered 
             <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> instances can be used like 
             regular .NET properties, but without IntelliSense ("late binding").
             </p><p>
             With each call of <span class="parameter">conversion</span> all <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a>
             instances in <span class="parameter">mapping</span> are reset to their 
             <a href="89b8ba33-74c0-f9cf-a252-f353a3f742ad.htm">DefaultValue</a>.
             </p></dd><dt class="has-text-weight-normal"><span class="parameter">delimiter</span>  <a href="https://learn.microsoft.com/dotnet/api/system.char" target="_blank" rel="noopener noreferrer">Char</a>  (Optional)</dt><dd>The field separator character.</dd><dt class="has-text-weight-normal"><span class="parameter">textEncoding</span>  <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding" target="_blank" rel="noopener noreferrer">Encoding</a>  (Optional)</dt><dd>
             The text encoding to be used or <span class="code">null</span> for <a href="https://learn.microsoft.com/dotnet/api/system.text.encoding.utf8" target="_blank" rel="noopener noreferrer">UTF8</a>.
             </dd><dt class="has-text-weight-normal"><span class="parameter">columnNames</span>  <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1" target="_blank" rel="noopener noreferrer">IReadOnlyCollection</a><span id="LST35365A71_13" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a><span id="LST35365A71_14" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>  (Optional)</dt><dd><p>
             A collection of column names for the header to be written, or <span class="code">null</span> to use the
             <a href="a103b78b-ccf3-344b-6221-21be97323486.htm">PropertyNames</a> of <span class="parameter">mapping</span> as column names.
             </p><p>
             The collection determines the order in which the columns appear in the CSV file.
             </p><p>
             The collection will be copied. If the collection contains <span class="code">null</span> values, empty 
             strings, or white space, these are replaced by automatically generated column names.
             Column names cannot appear twice. By default the comparison is case-sensitive but 
             it will be reset to a case-insensitive comparison if the column names are also 
             unique when treated case-insensitive.
             </p></dd></dl><h4 class="quickLinkHeader">Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">TData</span></dt><dd>
             Generic type parameter for the data type to write as CSV row.
             </dd></dl><h4 class="quickLinkHeader">Usage Note</h4>In Visual Basic and C#, you can call this method as an instance method on any object of type <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank" rel="noopener noreferrer">IEnumerable</a><span id="LST35365A71_15" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">TData</span></span><span id="LST35365A71_16" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>. When you use instance method syntax to call this method, omit the first parameter. For more information, see <a href="https://docs.microsoft.com/dotnet/visual-basic/programming-guide/language-features/procedures/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (Visual Basic)</a> or <a href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (C# Programming Guide)</a>.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDJCSection"><p>
             Creates a new CSV file. If the target file already exists, it is truncated and 
             overwritten.
             </p><p>
             When exchanging CSV data with Excel, the appropriate arguments can be determined 
             with <a href="8997540d-a632-cf81-5904-6b4a1139c2e1.htm">GetExcelArguments<span id="LST35365A71_17" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>.
             </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDKCSection"><p>Object serialization with CSV:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
using System.Text;
// A namespace alias helps to avoid name conflicts
// with the converters from System.ComponentModel
using Conv = FolkerKinzel.CsvTools.Mappings.TypeConverters;

namespace Examples;

internal sealed record Pupil(string? Name, string? Subject, DayOfWeek? LessonDay, TimeOnly? LessonBegin);

internal static class ObjectSerializationExample
{
    public static void CsvReadWritePupils(string filePath)
    {
        Pupil[] pupils = [
                            new("Susi", "Piano", DayOfWeek.Wednesday, new TimeOnly(14, 30)),
                            new("Carl Czerny", "Piano", DayOfWeek.Thursday, new TimeOnly(15, 15)),
                            new("Frederic Chopin", "Piano", null, null)
                         ];

        // A converter can be reused for more than one DynamicProperty:
        Conv::TypeConverter&lt;string?&gt; stringConverter = Conv::StringConverter.CreateNullable();

        // Initialize a CsvMapping that maps the data from the CSV-Columns and converts it to the right data type.
        // Aliases with wildcards can be used to match the column-headers of the CSV file. 
        CsvMapping mapping = CsvMappingBuilder
            .Create()
            .AddProperty("Name", ["*name"], stringConverter)
            .AddProperty("Subject", ["*subject", "*fach"], stringConverter)
            .AddProperty("LessonDay", ["*day", "*tag"], new Conv::EnumConverter&lt;DayOfWeek&gt;().ToNullableConverter())
            .AddProperty("LessonBegin", ["*begin?"], new Conv::TimeOnlyConverter().ToNullableConverter())
            .Build();

        // Create a CSV-File:
        pupils.SaveCsv(filePath,
                       mapping,
                       static (pupil, mapping) =&gt;
                       {
                           mapping.Name = pupil.Name;
                           mapping.Subject = pupil.Subject;
                           mapping.LessonDay = pupil.LessonDay;
                           mapping.LessonBegin = pupil.LessonBegin;
                       },
                       columnNames:
                       ["Unterrichtstag", "Unterrichtsbeginn", "Vollständiger Name", "Unterrichtsfach"]);

        Console.WriteLine(File.ReadAllText(filePath));
        Console.WriteLine();

        // Read the CSV file:
        using CsvReader&lt;Pupil&gt; pupilsReader =
           CsvConverter.OpenRead&lt;Pupil&gt;(filePath,
                                        mapping,
                                        static mapping =&gt; new Pupil(mapping.Name,
                                                                    mapping.Subject,
                                                                    mapping.LessonDay,
                                                                    mapping.LessonBegin));
        pupils = [.. pupilsReader];

        // Write the results to the Console:
        foreach (Pupil pupil in pupils)
        {
            Console.WriteLine(pupil);
        }
    }
}

/*
Console output: 

Unterrichtstag,Unterrichtsbeginn,Vollständiger Name,Unterrichtsfach
3,14:30:00,Susi,Piano
4,15:15:00,Carl Czerny,Piano
,,Frederic Chopin,Piano

Pupil { Name = Susi, Subject = Piano, LessonDay = Wednesday, LessonBegin = 14:30 }
Pupil { Name = Carl Czerny, Subject = Piano, LessonDay = Thursday, LessonBegin = 15:15 }
Pupil { Name = Frederic Chopin, Subject = Piano, LessonDay = , LessonBegin =  }
*/</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Exceptions</h2><div id="IDLCSection"><table class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noopener noreferrer">ArgumentNullException</a></td><td><span class="parameter">data</span>, or 
             <span class="parameter">filePath</span>, or <span class="parameter">mapping</span>, or 
             <span class="parameter">conversion</span> is <span class="code">null</span>.</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentexception" target="_blank" rel="noopener noreferrer">ArgumentException</a></td><td><p><span class="parameter">filePath</span> is not a valid file path.
             </p><p>
             - or -
             </p><p><span class="parameter">columnNames</span> is not <span class="code">null</span> and a column name in 
             <span class="parameter">columnNames</span> occurs twice.
             </p></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.io.ioexception" target="_blank" rel="noopener noreferrer">IOException</a></td><td>I/O error.</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.objectdisposedexception" target="_blank" rel="noopener noreferrer">ObjectDisposedException</a></td><td>The file was already closed.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="c170cd6c-bab0-d3d3-eb4f-4241c51e9efc.htm">CsvConverterExtension Class</a></div><div><a href="0f19cb69-d378-fb05-674a-b73c267ad2c5.htm">SaveCsv Overload</a></div><div><a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Type Parameters</a></li><li><a class="quickLink">Usage Note</a></li></ul></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Exceptions</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>