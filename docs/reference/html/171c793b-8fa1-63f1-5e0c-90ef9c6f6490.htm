<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>MultiColumnTypeConverter&lt;T&gt; Class</title><meta name="Title" content="MultiColumnTypeConverter&lt;T&gt;" /><meta name="Help.Id" content="T:FolkerKinzel.CsvTools.Mappings.Converters.MultiColumnTypeConverter`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.CsvTools.Mappings.Converters" /><meta name="guid" content="171c793b-8fa1-63f1-5e0c-90ef9c6f6490" /><meta name="Description" content="Abstract base class for type converters that provides conversions between .NET data types and CSV data that is distributed across multiple columns of a CSV file." /><meta name="tocFile" content="../toc/IDC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.CsvTools.Mappings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Multi<wbr />Column<wbr />Type<wbr />Converter<span id="LST604E93B6_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LST604E93B6_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Class</h1><div class="summary">
            Abstract base class for type converters that provides conversions between
            .NET data types and CSV data that is distributed across multiple columns of a CSV file.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="651ce3b9-3577-bae3-801d-2e62d1e5b978.htm">FolkerKinzel.CsvTools.Mappings.Converters</a><br /><strong>Assembly:</strong> FolkerKinzel.CsvTools.Mappings (in FolkerKinzel.CsvTools.Mappings.dll) Version: 1.0.0-alpha.2+cd50bba4723880f625a0332532b87d7161c393c1<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="identifier">MultiColumnTypeConverter</span>&lt;T&gt; : <span class="identifier">ITypeConverter</span>&lt;T&gt;
</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">MustInherit</span> <span class="keyword">Class</span> <span class="identifier">MultiColumnTypeConverter</span>(<span class="keyword">Of</span> T)
	<span class="keyword">Implements</span> <span class="identifier">ITypeConverter</span>(<span class="keyword">Of</span> T)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">generic</span>&lt;<span class="keyword">typename</span> T&gt;
<span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">MultiColumnTypeConverter</span> <span class="keyword">abstract</span> : <span class="identifier">ITypeConverter</span>&lt;T&gt;</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">AbstractClassAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">MultiColumnTypeConverter</span>&lt;'T&gt; = 
    <span class="keyword">class</span>
        <span class="keyword">interface</span> <span class="identifier">ITypeConverter</span>&lt;'T&gt;
    <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">MultiColumnTypeConverter<span id="LST604E93B6_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST604E93B6_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span></dd></dl><dl class="implementsList"><dt>Implements</dt><dd><a href="d632ce30-c8c2-1a6b-1f2b-05fd788e42b5.htm">ITypeConverter</a><span id="LST604E93B6_4" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span><span id="LST604E93B6_5" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dd></dl><h4>Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd>The <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> to convert.</dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDFCSection"><p>
            A ready-to-use implementation of this class can't be provided because their structure depends 
            on the CSV file to be processed. Fortunately, writing a derived class is easy:
            </p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Notes to Implementers</p></div><div class="message-body">
            Pass a <a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a> instance that 
            targets the required columns of the CSV file to the constructor, and override the abstract 
            members.
            </div></article></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDGCSection"><p>
            Using <span class="selflink">MultiColumnTypeConverter<span id="LST604E93B6_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST604E93B6_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span> to create and parse a CSV file.
            </p><p>
            (For the sake of easier readability exception handling has been omitted.)
            </p><img src="\images\MultiColumnConverter.png" /><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
using FolkerKinzel.CsvTools.Mappings.Converters;
using System.Diagnostics;
using System.Drawing;

namespace Examples;

internal static class MultiColumnConverterExample
{
    private class ColorConverter(Mapping mapping) 
        : MultiColumnTypeConverter&lt;Color&gt;(mapping, Color.Transparent, true)
    {
        public override bool AllowsNull =&gt; false;

        protected override void DoConvertToCsv(Color value)
        {
            dynamic mapping = Mapping;

            mapping.A = value.A; 
            mapping.R = value.R;
            mapping.G = value.G;
            mapping.B = value.B;
        }

        protected override bool TryParse(out Color result)
        {
            dynamic mapping = Mapping;

            try
            {
                result = Color.FromArgb(mapping.A, mapping.R, mapping.G, mapping.B);
                return true;
            }
            catch(FormatException)
            {
                result = FallbackValue;
                return false;
            }
        }
    }

    internal static void ParseDataFromSeveralColumns()
    {
        TypeConverter&lt;byte&gt; byteConverter = new ByteConverter().ToHexConverter();
        Mapping colorMapping = Mapping.Create()
                                      .AddProperty("A", byteConverter)
                                      .AddProperty("R", byteConverter)
                                      .AddProperty("G", byteConverter)
                                      .AddProperty("B", byteConverter);
        var colorConverter = new ColorConverter(colorMapping);

        Mapping mapping = Mapping
            .Create()
            .AddProperty("ColorName", ["Name"], StringConverter.CreateNullable())
            .AddProperty("Color", colorConverter);

        DirectoryInfo tmpDirectory = Directory.CreateTempSubdirectory();
        string csvPath = Path.Combine(tmpDirectory.FullName, "Colors.csv");

        CreateCsvFile(csvPath, mapping);
        Console.WriteLine(File.ReadAllText(csvPath));

        ShowCsvContentInBrowser(mapping, csvPath);

        Thread.Sleep(5000);
        tmpDirectory.Delete(true);
    }

    private static void CreateCsvFile(string csvPath, dynamic mapping)
    {
        using CsvWriter writer = Csv.OpenWrite(csvPath, ["Name", "A", "R", "G", "B"]);
        mapping.Record = writer.Record;

        mapping.ColorName = nameof(Color.CornflowerBlue);
        mapping.Color = Color.CornflowerBlue;
        writer.WriteRecord();

        mapping.ColorName = nameof(Color.LawnGreen);
        mapping.Color = Color.LawnGreen;
        writer.WriteRecord();

        mapping.ColorName = nameof(Color.Salmon);
        mapping.Color = Color.Salmon;
        writer.WriteRecord();
    }

    private static void ShowCsvContentInBrowser(Mapping mapping, string csvPath)
    {
        string htmlPath = Path.Combine(Path.GetDirectoryName(csvPath) ?? "", "colors.htm");
        CreateHtmlFile(htmlPath, csvPath, mapping);
        _ = Process.Start(new ProcessStartInfo { FileName = htmlPath, UseShellExecute = true });
    }

    private static void CreateHtmlFile(string htmlPath, string csvPath, dynamic mapping)
    {
        var htmlFile = new FileInfo(htmlPath);
        using StreamWriter writer = htmlFile.AppendText();

        writer.WriteLine("""
            &lt;html&gt;
            &lt;head&gt;
            &lt;title&gt;Colors From CSV&lt;/title&gt;
            &lt;style&gt;
            table { font-size: 200%; }
            th, td { padding: 30px; }
            &lt;/style&gt;
            &lt;/head&gt;
            &lt;body&gt;
            &lt;table&gt;
            &lt;thead&gt;
            &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Color&lt;/th&gt;&lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            """);

        using CsvReader csvReader = Csv.OpenRead(csvPath);

        foreach (CsvRecord record in csvReader)
        {
            mapping.Record = record;
            writer.Write("&lt;tr&gt;&lt;td&gt;");
            writer.Write(mapping.ColorName);
            writer.Write("&lt;/td&gt;");
            writer.Write("&lt;td style=\"background-color: #");
            writer.Write((mapping.Color.ToArgb() &amp; 0xFFFFFF).ToString("x"));
            writer.Write(";\" /&gt;");
            writer.WriteLine("&lt;/td&gt;&lt;/tr&gt;");
        }

        writer.WriteLine("""
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            """);
    }
}

/*
 Console Output:

Name,A,R,G,B
CornflowerBlue,FF,64,95,ED
LawnGreen,FF,7C,FC,0
Salmon,FF,FA,80,72

*/</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDAGASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="04c578f3-4fb6-ea08-0262-c334e7c7f9d2.htm">MultiColumnTypeConverter<span id="LST604E93B6_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST604E93B6_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Abstract base class for type converters that provides conversions between
            .NET data types and CSV data that is distributed across multiple columns of a CSV file.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDLGASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="221e819b-da6e-ae1b-aae8-700f594a85e0.htm">AllowsNull</a></td><td>
            Gets a value indicating whether the converter allows 
            <span class="code">null</span> values as input.
            </td></tr><tr><td><a href="a4240e28-0d91-7301-ada6-bb7f07e80932.htm">DataType</a></td><td>
            The data type the converter converts.
            </td></tr><tr><td><a href="e01b762b-0276-11a8-e6ce-654c4c692510.htm">FallbackValue</a></td><td>
            Gets the value to return if parsing fails and
            the <a href="b82ea1f6-e98b-83ac-a424-c41d27924bdd.htm">Throwing</a> property is <span class="code">false</span>.
            </td></tr><tr><td><a href="1a0a88a8-710f-4081-e4ed-75d0fea70c07.htm">Mapping</a></td><td>
            The <a href="1928a31a-a1c6-6aab-aaa6-6f6da0f51d31.htm">Mapping</a> to use to access those columns 
            of the CSV file that are required for the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> conversion.
            </td></tr><tr><td><a href="19cf1e55-16ca-d5ea-de3f-0056ebcafc2b.htm">Throwing</a></td><td>
            Gets a value indicating whether the converter throws a
            <a href="https://learn.microsoft.com/dotnet/api/system.formatexception" target="_blank" rel="noopener noreferrer">FormatException</a> 
            when a parsing error occurs, or if it returns 
            <a href="53369189-be0e-a2ad-f2e9-f0f08de31f29.htm">FallbackValue</a> value instead.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDCGASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="d5911ad8-a183-278d-0044-a0cef7349b7a.htm">ConvertToCsv(T)</a></td><td>
            Writes <span class="parameter">value</span> to the selected fields of <a href="aff2d00a-4a1b-4a55-7e0d-2a39155ac32d.htm">Record</a> 
            using <a href="1a0a88a8-710f-4081-e4ed-75d0fea70c07.htm">Mapping</a>.
            </td></tr><tr><td><a href="04c4c695-0dab-e941-e3da-265bf29f8c71.htm">ConvertToCsv(Object)</a></td><td>
            Writes <span class="parameter">value</span> to the selected fields of <a href="aff2d00a-4a1b-4a55-7e0d-2a39155ac32d.htm">Record</a> 
            using <a href="1a0a88a8-710f-4081-e4ed-75d0fea70c07.htm">Mapping</a>.
            </td></tr><tr><td><a href="18dbf897-1052-47e7-f600-5244938dd6dd.htm">DoConvertToCsv</a></td><td>
            Writes a <span class="parameter">T</span> value to several properties of <a href="1a0a88a8-710f-4081-e4ed-75d0fea70c07.htm">Mapping</a>.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td>Creates a shallow copy of the current <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="97dcde32-ac0c-44fc-c546-dad4eae69758.htm">Parse</a></td><td>
            Converts the content of <a href="1a0a88a8-710f-4081-e4ed-75d0fea70c07.htm">Mapping</a> to <span class="parameter">T</span>.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td>Returns a string that represents the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="c049a2de-ee24-7668-f510-b44b23f1bc25.htm">TryParse</a></td><td>
            Tries to convert the content of <a href="1a0a88a8-710f-4081-e4ed-75d0fea70c07.htm">Mapping</a> to <span class="parameter">T</span>.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Exceptions</h2><div id="IDHCSection"><table class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noopener noreferrer">ArgumentNullException</a></td><td><span class="parameter">mapping</span> is <span class="code">null</span>.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="651ce3b9-3577-bae3-801d-2e62d1e5b978.htm">FolkerKinzel.CsvTools.Mappings.Converters Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Exceptions</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>