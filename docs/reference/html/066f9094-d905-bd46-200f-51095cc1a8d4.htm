<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>DynamicPropertyExtension.AsITypedProperty&lt;T&gt; Method</title><meta name="Title" content="AsITypedProperty&lt;T&gt;" /><meta name="Help.Id" content="M:FolkerKinzel.CsvTools.Mappings.DynamicPropertyExtension.AsITypedProperty``1(FolkerKinzel.CsvTools.Mappings.DynamicProperty)" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.CsvTools.Mappings" /><meta name="guid" content="066f9094-d905-bd46-200f-51095cc1a8d4" /><meta name="Description" content="Casts a to a in order to have type safe access to its without having to use dynamic .NET properties (&quot;late binding&quot;)." /><meta name="tocFile" content="../toc/IDAKB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.CsvTools.Mappings</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Dynamic<wbr />Property<wbr />Extension<span id="LSTB3B2B8C8_0" data-languageSpecificText="cpp=::|nu=."></span>As<wbr />ITyped<wbr />Property<span id="LSTB3B2B8C8_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">T</span><span id="LSTB3B2B8C8_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Method</h1><div class="summary">
            Casts a <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> to a <a href="21968396-c199-b723-6be0-151b2c0a7638.htm">ITypedProperty<span id="LSTB3B2B8C8_3" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB3B2B8C8_4" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>
            in order to have type safe access to its <a href="8b96ee29-b083-b709-ba97-c106631ce3f0.htm">Value</a>
            without having to use dynamic .NET properties ("late binding").
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings</a><br /><strong>Assembly:</strong> FolkerKinzel.CsvTools.Mappings (in FolkerKinzel.CsvTools.Mappings.dll) Version: 1.1.0+1263e8243dc2cd78095f678f813d7d9c52ea4315<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">ITypedProperty</span>&lt;T&gt; <span class="identifier">AsITypedProperty</span>&lt;T&gt;(
	<span class="keyword">this</span> <span class="identifier">DynamicProperty</span> <span class="parameter">property</span>
)
</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb">&lt;<span class="identifier">ExtensionAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">AsITypedProperty</span>(<span class="keyword">Of</span> T) ( 
	<span class="parameter">property</span> <span class="keyword">As</span> <span class="identifier">DynamicProperty</span>
) <span class="keyword">As</span> <span class="identifier">ITypedProperty</span>(<span class="keyword">Of</span> T)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span>:
[<span class="identifier">ExtensionAttribute</span>]
<span class="keyword">generic</span>&lt;<span class="keyword">typename</span> T&gt;
<span class="keyword">static</span> <span class="identifier">ITypedProperty</span>&lt;T&gt;^ <span class="identifier">AsITypedProperty</span>(
	<span class="identifier">DynamicProperty</span>^ <span class="parameter">property</span>
)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">ExtensionAttribute</span>&gt;]
<span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">AsITypedProperty</span> : 
        <span class="parameter">property</span> : <span class="identifier">DynamicProperty</span> <span class="keyword">-&gt;</span> <span class="identifier">ITypedProperty</span>&lt;'T&gt; </code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">property</span>  <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a></dt><dd>The <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a> to cast.</dd></dl><h4 class="quickLinkHeader">Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">T</span></dt><dd>The <a href="2e96cf12-c253-3087-81b0-b2905956c202.htm">DataType</a> of the 
            <a href="4f4d61ef-73fd-6f9c-9735-d13b649e046d.htm">TypeConverter<span id="LSTB3B2B8C8_5" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB3B2B8C8_6" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> that <span class="parameter">property</span> has
            been initialized with.</dd></dl><h4 class="quickLinkHeader">Return Value</h4><a href="21968396-c199-b723-6be0-151b2c0a7638.htm">ITypedProperty</a><span id="LSTB3B2B8C8_7" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink"><span class="typeparameter">T</span></span><span id="LSTB3B2B8C8_8" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br /><span class="parameter">property</span> casted as <a href="21968396-c199-b723-6be0-151b2c0a7638.htm">ITypedProperty<span id="LSTB3B2B8C8_9" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB3B2B8C8_10" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            <h4 class="quickLinkHeader">Usage Note</h4>In Visual Basic and C#, you can call this method as an instance method on any object of type <a href="dc1efb76-ccb1-38fb-cd92-12937a874421.htm">DynamicProperty</a>. When you use instance method syntax to call this method, omit the first parameter. For more information, see <a href="https://docs.microsoft.com/dotnet/visual-basic/programming-guide/language-features/procedures/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (Visual Basic)</a> or <a href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (C# Programming Guide)</a>.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDECSection"><p>
            This method exists in order to support high-performance scenarios. It allows 
            you to process value types without boxing and unboxing.
            </p><p>
            The method is just syntactic sugar around a simple cast. When passing a <span class="code">null</span>
            reference as argument the compiler will give you a nullability warning but the 
            return type will be <span class="code">null</span>.
            </p><article class="message is-warning"><div class="message-header"><p><span class="icon"><i class="fa fa-warning"></i></span>  Caution</p></div><div class="message-body">
            When using nullable reference types, take care to cast to the correct nullability:
            The compiler won't warn you when casting incorrectly!
            </div></article></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDFCSection"><p>Object serialization with CSV:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using FolkerKinzel.CsvTools;
using FolkerKinzel.CsvTools.Mappings;
using FolkerKinzel.CsvTools.Mappings.TypeConverters;
using System.Globalization;

namespace Benchmarks;

internal static partial class CalculationReader
{
    internal static IList&lt;Calculation&gt; ReadPerformance(string csv)
    {
        // Strict parsers are faster but less flexible:
        var doubleConverter = new DoubleConverter(styles: NumberStyles.Integer
                                                        | NumberStyles.AllowLeadingSign
                                                        | NumberStyles.AllowDecimalPoint);

        CsvMapping mapping = CsvMappingBuilder
            .Create()
            .AddProperty("First", doubleConverter)
            .AddProperty("Operator", new CharConverter())
            .AddProperty("Second", doubleConverter)
            .AddProperty("Result", doubleConverter)
            .Build();

        using var stringReader = new StringReader(csv);
        using var csvReader = new CsvReader(stringReader, options: CsvOpts.Default
        /* Using the DisableCaching option avoids cloning the */ | CsvOpts.DisableCaching);
        /* the CsvRecord instance with each Read().           */

        var list = new List&lt;Calculation&gt;(50); // (This data storage allows further optimization.)

        // Using ITypedProperty&lt;T&gt; instances avoids boxing and unboxing of value types.
        // The AsITypedProperty&lt;T&gt;() extension method is "syntactic sugar" that can be
        // replaced with a simple cast to save a few nanoseconds.
        ITypedProperty&lt;double&gt; first = mapping[0].AsITypedProperty&lt;double&gt;();
        ITypedProperty&lt;char&gt; op = mapping[1].AsITypedProperty&lt;char&gt;();
        ITypedProperty&lt;double&gt; second = mapping[2].AsITypedProperty&lt;double&gt;();
        ITypedProperty&lt;double&gt; result = mapping[3].AsITypedProperty&lt;double&gt;();

        CsvRecord? record;

        while ((record = csvReader.Read()) != null)
        {
            mapping.Record = record;
            list.Add(new Calculation(first.Value, op.Value, second.Value, result.Value));
        }

        return list;
    }
}</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Exceptions</h2><div id="IDGCSection"><table class="table is-hoverable"><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.invalidcastexception" target="_blank" rel="noopener noreferrer">InvalidCastException</a></td><td><span class="parameter">property</span> is not of type 
            <a href="21968396-c199-b723-6be0-151b2c0a7638.htm">ITypedProperty<span id="LSTB3B2B8C8_11" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB3B2B8C8_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="25c3974f-9d63-c1db-765e-fa563c9abdd8.htm">DynamicPropertyExtension Class</a></div><div><a href="36bca041-1217-8659-0718-bf83af638a0c.htm">FolkerKinzel.CsvTools.Mappings Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Type Parameters</a></li><li><a class="quickLink">Return Value</a></li><li><a class="quickLink">Usage Note</a></li></ul></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Exceptions</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>